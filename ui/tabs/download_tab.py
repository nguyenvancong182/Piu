# -*- coding: utf-8 -*-
# File: ui/tabs/download_tab.py

import customtkinter as ctk
import os
import logging
import webbrowser
from tkinter import filedialog, messagebox

# Import c√°c th√†nh ph·∫ßn UI chung
from config.ui_constants import get_theme_colors
from ui.widgets.tooltip import Tooltip
from ui.widgets.menu_utils import textbox_right_click_menu

# Import c√°c h√†m ti·ªán √≠ch
from utils.helpers import get_default_downloads_folder, open_file_with_default_app
from config.constants import APP_NAME


class DownloadTab(ctk.CTkFrame):
    """
    L·ªõp qu·∫£n l√Ω to√†n b·ªô giao di·ªán v√† logic cho Tab T·∫£i Xu·ªëng (Download).
    """

    def __init__(self, master, master_app):
        """
        Kh·ªüi t·∫°o frame cho Tab T·∫£i Xu·ªëng.

        Args:
            master (ctk.CTkFrame): Frame cha (main_content_frame t·ª´ SubtitleApp).
            master_app (SubtitleApp): Instance c·ªßa ·ª©ng d·ª•ng ch√≠nh (PiuApp).
        """
        super().__init__(master, fg_color="transparent")
        self.master_app = master_app
        self.logger = logging.getLogger(APP_NAME)

        # Khai b√°o c√°c widget con c·ªßa tab n√†y (s·∫Ω ƒë∆∞·ª£c g√°n trong _build_ui)
        self.download_url_text = None
        self.download_playlist_check = None
        self.optimize_mobile_checkbox = None
        self.disable_sheet_check_checkbox = None
        self.download_path_display_label = None
        self.download_rename_check = None
        self.download_rename_entry_frame = None
        self.download_rename_entry = None
        self.download_video_quality_menu = None
        self.download_audio_quality_menu = None
        self.auto_dub_checkbox = None
        self.download_auto_dub_config_frame = None
        self.auto_upload_dl_checkbox = None
        self.download_auto_upload_config_frame = None
        self.download_sound_check = None
        self.download_sound_button = None
        self.download_shutdown_check = None
        self.download_stop_on_error_check = None
        self.download_use_cookies_checkbox = None
        self.download_cookies_path_label = None
        self.download_cookies_button = None
        self.add_sheet_button = None
        self.all_button = None
        self.download_start_button = None
        self.download_stop_button = None
        self.open_download_folder_button = None
        self.download_queue_section = None
        self.piu_button_dl_ref = None
        self.key_button_dl_ref = None
        self.update_button_dl_ref = None
        self.clear_log_button_ref = None
        self.download_log_textbox = None
        self.download_progress_bar = None

        # G·ªçi h√†m x√¢y d·ª±ng UI (s·∫Ω th√™m h√†m n√†y ·ªü b∆∞·ªõc sau)
        self._build_ui() 

        self.logger.info("DownloadTab ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o.")

    def _build_ui(self):
        """ 
        T·∫°o c√°c th√†nh ph·∫ßn UI cho ch·∫ø ƒë·ªô xem 'T·∫£i xu·ªëng'.
        (ƒê√¢y l√† h√†m _create_download_tab c≈©, ƒë√£ ƒë∆∞·ª£c ƒë·ªïi t√™n v√† s·ª≠a l·ªói tham chi·∫øu)
        """
        self.logger.debug("ƒêang t·∫°o UI Ch·∫ø ƒë·ªô xem T·∫£i xu·ªëng (Theme-Aware)...")

        colors = get_theme_colors()
        panel_bg_color = colors["panel_bg"]
        card_bg_color = colors["card_bg"]
        log_textbox_bg_color = colors["log_textbox_bg"]
        danger_button_color = colors["danger_button"]
        danger_button_hover_color = colors["danger_button_hover"]
        special_action_button_color = colors["special_action_button"]
        special_action_hover_color = colors["special_action_hover"]

        main_frame_dl = ctk.CTkFrame(self, fg_color="transparent") # S·ª≠a: master l√† self (DownloadTab)
        main_frame_dl.pack(fill="both", expand=True)

        main_frame_dl.grid_columnconfigure(0, weight=1, uniform="panelgroup")
        main_frame_dl.grid_columnconfigure(1, weight=2, uniform="panelgroup")
        main_frame_dl.grid_rowconfigure(0, weight=1)    

        left_panel_dl_container = ctk.CTkFrame(main_frame_dl, fg_color=panel_bg_color, corner_radius=12)
        left_panel_dl_container.grid(row=0, column=0, padx=(0, 10), pady=0, sticky="nsew")
        left_panel_dl_container.pack_propagate(False)

        left_dl_scrollable_content = ctk.CTkScrollableFrame(
            left_panel_dl_container,
            fg_color="transparent"
        )
        left_dl_scrollable_content.pack(expand=True, fill="both", padx=0, pady=0)

        # === C·ª§M N√öT H√ÄNH ƒê·ªòNG CH√çNH ===
        self._create_download_action_buttons_section(
            left_dl_scrollable_content,
            special_action_button_color,
            special_action_hover_color,
            danger_button_color,
            danger_button_hover_color
        )
        # === INPUT CONFIG SECTION ===
        self._create_download_input_config_section(left_dl_scrollable_content, card_bg_color)
        # === OUTPUT CONFIG SECTION ===
        self._create_download_output_config_section(left_dl_scrollable_content, card_bg_color)
        # === FORMAT & QUALITY SECTION ===
        self._create_download_format_quality_section(left_dl_scrollable_content, card_bg_color)
        # === AUTO OPTIONS SECTIONS ===
        self._create_download_auto_options_sections(left_dl_scrollable_content, card_bg_color)
        # === EXTRAS & COOKIES SECTION ===
        self._create_download_extras_cookies_sections(left_dl_scrollable_content, card_bg_color)
        # === RIGHT PANEL (Queue, Log, Progress) ===
        self._create_download_right_panel(
            main_frame_dl, panel_bg_color, card_bg_color, log_textbox_bg_color, 
            special_action_button_color, special_action_hover_color
        )

    def _create_download_action_buttons_section(self, parent_frame, special_action_button_color, special_action_hover_color, danger_button_color, danger_button_hover_color):
        """T·∫°o c·ª•m n√∫t h√†nh ƒë·ªông ch√≠nh (Start, Stop, Sheet, All)."""
        action_buttons_main_frame_download = ctk.CTkFrame(parent_frame, fg_color="transparent")
        action_buttons_main_frame_download.pack(pady=10, padx=10, fill="x")

        btn_row_1_download = ctk.CTkFrame(action_buttons_main_frame_download, fg_color="transparent")
        btn_row_1_download.pack(fill="x", pady=(0, 5))

        self.add_sheet_button = ctk.CTkButton(
        btn_row_1_download,
        text="üìë Th√™m t·ª´ Sheet",
        height=35, font=("Segoe UI", 13, "bold"),
        command=self.master_app.fetch_links_from_sheet, # S·ª≠a: self.master_app.
        state="normal"
        )
        self.add_sheet_button.pack(side="left", expand=True, fill="x", padx=(0, 2))

        self.all_button = ctk.CTkButton(
        btn_row_1_download,
        text="üöÄ ALL (D/S/D)",
        height=35, font=("Segoe UI", 13, "bold"),
        command=self.master_app.start_download_and_sub, # S·ª≠a: self.master_app.
        fg_color=special_action_button_color,
        hover_color=special_action_hover_color
        )
        self.all_button.pack(side="left", expand=True, fill="x", padx=(3, 0))

        self.download_start_button = ctk.CTkButton(
        action_buttons_main_frame_download,
        text="‚úÖ B·∫Øt ƒë·∫ßu T·∫£i (Ch·ªâ T·∫£i)",
        height=45, font=("Segoe UI", 15, "bold"),
        command=self.master_app.start_download, # S·ª≠a: self.master_app.
        )
        self.download_start_button.pack(fill="x", pady=5)

        btn_row_3_download_controls = ctk.CTkFrame(action_buttons_main_frame_download, fg_color="transparent")
        btn_row_3_download_controls.pack(fill="x", pady=(5, 0))
        btn_row_3_download_controls.grid_columnconfigure((0, 1), weight=1)

        self.download_stop_button = ctk.CTkButton(
        btn_row_3_download_controls,
        text="üõë D·ª´ng T·∫£i",
        height=35, font=("Segoe UI", 13, "bold"),
        command=self.master_app.stop_download, # S·ª≠a: self.master_app.
        fg_color=danger_button_color,
        hover_color=danger_button_hover_color,
        state=ctk.DISABLED,
        border_width=0
        )
        self.download_stop_button.grid(row=0, column=0, padx=(0, 2), pady=0, sticky="ew")

        self.open_download_folder_button = ctk.CTkButton(
            btn_row_3_download_controls,
            text="üìÇ M·ªü Th∆∞ M·ª•c T·∫£i",
            height=35, font=("Segoe UI", 13, "bold"),
            command=self.open_download_folder, # H√†m ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang DownloadTab
            border_width=0
        )
        self.open_download_folder_button.grid(row=0, column=1, padx=(3, 0), pady=0, sticky="ew")

    def _create_download_input_config_section(self, parent_frame, card_bg_color):
        """T·∫°o c·ª•m nh·∫≠p link v√† t√πy ch·ªçn playlist/mobile/sheet."""
        input_config_frame = ctk.CTkFrame(parent_frame, fg_color=card_bg_color, corner_radius=8)
        input_config_frame.pack(fill="x", padx=10, pady=(0, 5))
        input_config_frame.grid_columnconfigure(0, weight=1)
        input_config_frame.grid_columnconfigure(1, weight=0)

        input_label = ctk.CTkLabel(input_config_frame, text="üñã Nh·∫≠p link", anchor='w', font=("Segoe UI", 12, "bold"))
        input_label.grid(row=0, column=0, padx=(10, 5), pady=(5, 0), sticky="w")

    # Widget 'self.download_playlist_check' thu·ªôc v·ªÅ class n√†y
    # Bi·∫øn 'self.master_app.download_playlist_var' thu·ªôc v·ªÅ app ch√≠nh
        self.download_playlist_check = ctk.CTkCheckBox(
        input_config_frame, text="T·∫£i c·∫£ playlist?", 
        variable=self.master_app.download_playlist_var, # S·ª≠a: self.master_app.
        checkbox_height=18, checkbox_width=18, font=("Segoe UI", 12)
        )
        self.download_playlist_check.grid(row=0, column=1, padx=(5, 10), pady=(5, 0), sticky="e")

        self.download_url_text = ctk.CTkTextbox(
        input_config_frame, 
        height=100, wrap="word", font=("Consolas", 10), border_width=1
        )
        self.download_url_text.grid(row=1, column=0, columnspan=2, padx=10, pady=(2, 5), sticky="ew")
        self.download_url_text.bind("<Button-3>", textbox_right_click_menu)

        checkbox_frame_bottom = ctk.CTkFrame(input_config_frame, fg_color="transparent")
        checkbox_frame_bottom.grid(row=2, column=0, columnspan=2, padx=10, pady=(0, 10), sticky="ew")
        checkbox_frame_bottom.grid_columnconfigure((0, 1), weight=1)

        # S·ª≠a: Kh·ªüi t·∫°o bi·∫øn optimize_for_mobile_var n·∫øu ch∆∞a c√≥ tr√™n master_app
        if not hasattr(self.master_app, 'optimize_for_mobile_var'):
            self.master_app.optimize_for_mobile_var = ctk.BooleanVar(value=self.master_app.cfg.get("optimize_for_mobile", False))

        self.optimize_mobile_checkbox = ctk.CTkCheckBox(
        checkbox_frame_bottom, text="T·ªëi ∆∞u Mobile", 
        variable=self.master_app.optimize_for_mobile_var, # S·ª≠a: self.master_app.
        onvalue=True, offvalue=False, checkbox_width=18, checkbox_height=18,
        font=("Segoe UI", 11), 
        command=self.master_app.save_current_config # S·ª≠a: self.master_app.
        )
        self.optimize_mobile_checkbox.grid(row=0, column=0, sticky="w")

        self.disable_sheet_check_checkbox = ctk.CTkCheckBox(
        checkbox_frame_bottom, text="T·∫Øt ki·ªÉm tra Sheet", 
        variable=self.master_app.disable_auto_sheet_check_var, # S·ª≠a: self.master_app.
        checkbox_height=18, checkbox_width=18, font=("Segoe UI", 11), 
        command=self.master_app.save_current_config # S·ª≠a: self.master_app.
        )
        self.disable_sheet_check_checkbox.grid(row=0, column=1, sticky="e")

    def _create_download_output_config_section(self, parent_frame, card_bg_color):
        """T·∫°o c·ª•m ch·ªçn th∆∞ m·ª•c output v√† ƒë·ªïi t√™n."""
        output_config_frame = ctk.CTkFrame(parent_frame, fg_color=card_bg_color, corner_radius=8)
        output_config_frame.pack(fill="x", padx=10, pady=(0, 5))
        ctk.CTkLabel(output_config_frame, text="üìÅ ƒê·∫ßu ra & ƒê·ªïi t√™n", font=("Segoe UI", 12, "bold")).pack(pady=(5,2), padx=10, anchor="w")
        path_frame_inner = ctk.CTkFrame(output_config_frame, fg_color="transparent")
        path_frame_inner.pack(fill="x", padx=10, pady=(0, 5))
        ctk.CTkLabel(path_frame_inner, text="L∆∞u t·∫°i:", width=50, anchor='w').pack(side="left")

        self.download_path_display_label = ctk.CTkLabel(
        path_frame_inner, 
        textvariable=self.master_app.download_path_var, # S·ª≠a: self.master_app.
        anchor="w", wraplength=170, font=("Segoe UI", 10), 
        text_color=("gray30", "gray70")
        )
        self.download_path_display_label.pack(side="left", fill="x", expand=True, padx=(5, 5))
        ctk.CTkButton(
            path_frame_inner, text="Ch·ªçn", width=50, height=28, 
            command=self.select_download_path # H√†m ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang DownloadTab
        ).pack(side="left")

        display_path = self.master_app.download_path_var.get()
        self.download_path_display_label.configure(text=display_path if display_path else "Ch∆∞a ch·ªçn")
        self.master_app.download_path_var.trace_add("write", lambda *a: self.download_path_display_label.configure(text=self.master_app.download_path_var.get() or "Ch∆∞a ch·ªçn"))

        self.download_rename_check = ctk.CTkCheckBox(
            output_config_frame, text="ƒê·ªïi t√™n h√†ng lo·∫°t?", 
            variable=self.master_app.download_rename_var, # S·ª≠a: self.master_app.
            checkbox_height=18, checkbox_width=18, 
            command=self.toggle_download_rename_entry # S·ª≠a: self.
        )
        self.download_rename_check.pack(anchor='w', padx=10, pady=(5,2))

        self.download_rename_entry_frame = ctk.CTkFrame(output_config_frame, fg_color="transparent")
        self.download_rename_entry_frame.pack(fill="x", padx=10, pady=(0, 10))
        ctk.CTkLabel(self.download_rename_entry_frame, text="T√™n chung:", width=70, anchor='w').pack(side="left")

        self.download_rename_entry = ctk.CTkEntry(
            self.download_rename_entry_frame, 
            textvariable=self.master_app.download_rename_box_var, # S·ª≠a: self.master_app.
            state="disabled", font=("Consolas", 10)
        )
        self.download_rename_entry.pack(side="left", fill="x", expand=True)
        # G·ªçi h√†m toggle ƒë·ªÉ kh·ªüi t·∫°o tr·∫°ng th√°i ban ƒë·∫ßu
        self.master_app.after(50, self.toggle_download_rename_entry)

    def _create_download_format_quality_section(self, parent_frame, card_bg_color):
        """T·∫°o c·ª•m ch·ªçn ƒë·ªãnh d·∫°ng (video/mp3) v√† ch·∫•t l∆∞·ª£ng."""
        format_config_frame = ctk.CTkFrame(parent_frame, fg_color=card_bg_color, corner_radius=8)
        format_config_frame.pack(fill="x", padx=10, pady=(0, 5))
        ctk.CTkLabel(format_config_frame, text="‚öôÔ∏è ƒê·ªãnh d·∫°ng & Ch·∫•t l∆∞·ª£ng", font=("Segoe UI", 12, "bold")).pack(pady=(5,5), padx=10, anchor="w")

        mode_frame_inner = ctk.CTkFrame(format_config_frame, fg_color="transparent")
        mode_frame_inner.pack(fill="x", padx=10, pady=(5,5))
        modes = [("Video", "video"), ("MP3", "mp3"), ("C·∫£ 2", "both")]
        mode_frame_inner.grid_columnconfigure((0, 1, 2), weight=1)
        for i, (text, value) in enumerate(modes):
         rb = ctk.CTkRadioButton(
             mode_frame_inner, text=text, 
             variable=self.master_app.download_mode_var, # S·ª≠a: self.master_app.
             value=value, radiobutton_width=18, radiobutton_height=18
         )
         rb.grid(row=0, column=i, padx=5, pady=5, sticky="w")

        qual_frame_inner = ctk.CTkFrame(format_config_frame, fg_color="transparent")
        qual_frame_inner.pack(fill="x", padx=10, pady=(0,10))
        ctk.CTkLabel(qual_frame_inner, text="Video:", width=50, anchor='w').grid(row=0, column=0, pady=(0,5), sticky='w')
        video_options = ["best", "2160p", "1440p", "1080p", "720p", "480p", "360p"]
        current_v_quality = self.master_app.download_video_quality_var.get()
        if current_v_quality not in video_options: 
            current_v_quality = "1080p"; self.master_app.download_video_quality_var.set(current_v_quality)

        self.download_video_quality_menu = ctk.CTkOptionMenu(
        qual_frame_inner, 
        variable=self.master_app.download_video_quality_var, # S·ª≠a: self.master_app.
        values=video_options
        )
        self.download_video_quality_menu.grid(row=0, column=1, sticky='ew', padx=5)

        ctk.CTkLabel(qual_frame_inner, text="MP3:", width=50, anchor='w').grid(row=1, column=0, pady=(5,5), sticky='w')
        audio_options = ["best", "320k", "256k", "192k", "128k", "96k"]
        current_a_quality = self.master_app.download_audio_quality_var.get();
        if current_a_quality not in audio_options: 
            current_a_quality = "320k"; self.master_app.download_audio_quality_var.set(current_a_quality)

        self.download_audio_quality_menu = ctk.CTkOptionMenu(
        qual_frame_inner, 
        variable=self.master_app.download_audio_quality_var, # S·ª≠a: self.master_app.
        values=audio_options
        )
        self.download_audio_quality_menu.grid(row=1, column=1, sticky='ew', padx=5)
        qual_frame_inner.grid_columnconfigure(1, weight=1)

    def _create_download_auto_options_sections(self, parent_frame, card_bg_color):
        """T·∫°o c·ª•m t√πy ch·ªçn t·ª± ƒë·ªông (Dub v√† Upload)."""
        self.download_auto_dub_config_frame = ctk.CTkFrame(parent_frame, fg_color=card_bg_color, corner_radius=8)
        self.download_auto_dub_config_frame.pack(fill="x", padx=10, pady=(0, 5)) 

        self.auto_dub_checkbox = ctk.CTkCheckBox(
        self.download_auto_dub_config_frame, 
        text="üéô T·ª± ƒê·ªông Thuy·∫øt Minh (Sau Sub)",
        variable=self.master_app.download_auto_dub_after_sub_var, # S·ª≠a: self.master_app.
        checkbox_height=18, checkbox_width=18,
        font=("Segoe UI", 13)
        )
        self.auto_dub_checkbox.pack(side="left", anchor="w", padx=10, pady=10)

        self.download_auto_upload_config_frame = ctk.CTkFrame(parent_frame, fg_color=card_bg_color, corner_radius=8)
        self.download_auto_upload_config_frame.pack(fill="x", padx=10, pady=(0, 5))

        self.auto_upload_dl_checkbox = ctk.CTkCheckBox(
        self.download_auto_upload_config_frame,
        text="üì§ T·ª± ƒë·ªông Upload YT (Sau khi t·∫£i xong)",
        variable=self.master_app.auto_upload_after_download_var, # S·ª≠a: self.master_app.
        checkbox_height=18, checkbox_width=18,
        font=("Segoe UI", 13)
        )
        self.auto_upload_dl_checkbox.pack(side="left", anchor="w", padx=10, pady=10)

    def _create_download_extras_cookies_sections(self, parent_frame, card_bg_color):
        """T·∫°o c·ª•m t√πy ch·ªçn kh√°c (√¢m thanh, t·∫Øt m√°y) v√† cookies."""
        extras_config_frame = ctk.CTkFrame(parent_frame, fg_color=card_bg_color, corner_radius=8)
        extras_config_frame.pack(fill="x", padx=10, pady=(0, 10))
        ctk.CTkLabel(extras_config_frame, text="‚ú® T√πy ch·ªçn kh√°c", font=("Segoe UI", 12, "bold")).pack(pady=(5,5), padx=10, anchor="w")
        options_grid = ctk.CTkFrame(extras_config_frame, fg_color="transparent")
        options_grid.pack(fill="x", padx=10, pady=(0, 10))

        self.download_sound_check = ctk.CTkCheckBox(
        options_grid, text="üîî", 
        variable=self.master_app.download_sound_var, # S·ª≠a: self.master_app.
        checkbox_height=18, checkbox_width=18, 
        command=self.toggle_download_sound_button, width=20 # S·ª≠a: self.
        )
        self.download_sound_check.grid(row=0, column=0, padx=(0, 0), sticky='w')

        self.download_sound_button = ctk.CTkButton(
            options_grid, text=" Ch·ªçn √Çm", width=60, height=28, state="disabled", 
            command=self.select_download_sound # H√†m ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang DownloadTab
        )
        self.download_sound_button.grid(row=0, column=1, padx=(5, 5), sticky='w')

        self.download_shutdown_check = ctk.CTkCheckBox(
            options_grid, text="‚è∞ T·∫Øt m√°y", 
            variable=self.master_app.download_shutdown_var, # S·ª≠a: self.master_app.
            checkbox_height=18, checkbox_width=18
        )
        self.download_shutdown_check.grid(row=0, column=2, padx=(10, 0), sticky='w')

        self.download_stop_on_error_check = ctk.CTkCheckBox(
            options_grid, text="‚úã D·ª´ng khi l·ªói", 
            variable=self.master_app.download_stop_on_error_var, # S·ª≠a: self.master_app.
            checkbox_height=18, checkbox_width=18
        )
        self.download_stop_on_error_check.grid(row=0, column=3, padx=(10, 0), sticky='w')

        cookies_config_frame = ctk.CTkFrame(parent_frame, fg_color=card_bg_color, corner_radius=8)
        cookies_config_frame.pack(fill="x", padx=10, pady=(0, 10))
        cookies_config_frame.grid_columnconfigure(1, weight=1)

        self.download_use_cookies_checkbox = ctk.CTkCheckBox(
            cookies_config_frame,
            text="üç™ S·ª≠ d·ª•ng Cookies tr√¨nh duy·ªát",
            variable=self.master_app.download_use_cookies_var, # S·ª≠a: self.master_app.
            font=("Segoe UI", 12, "bold"),
            checkbox_height=18, checkbox_width=18,
            command=self.master_app._toggle_cookies_button_state # S·ª≠a: self.master_app.
        )
        self.download_use_cookies_checkbox.grid(row=0, column=0, columnspan=3, padx=10, pady=(10, 5), sticky="w")

        self.download_cookies_path_label = ctk.CTkLabel(cookies_config_frame, text="(Ch∆∞a ch·ªçn file cookies.txt)", text_color="gray", font=("Segoe UI", 10), wraplength=350, padx=5)
        self.download_cookies_path_label.grid(row=1, column=0, columnspan=2, padx=(25, 5), pady=2, sticky="ew")

        self.download_cookies_button = ctk.CTkButton(
            cookies_config_frame, text="Ch·ªçn file Cookies...", width=120, 
            command=self._select_cookies_file # H√†m ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang DownloadTab
        )
        self.download_cookies_button.grid(row=1, column=2, padx=10, pady=2, sticky="e")

        # G·ªçi h√†m tr√™n master_app ƒë·ªÉ kh·ªüi t·∫°o tr·∫°ng th√°i cookies button
        self.master_app.after(50, self.master_app._toggle_cookies_button_state)

    def _create_download_right_panel(self, main_frame, panel_bg_color, card_bg_color, log_textbox_bg_color, special_action_button_color, special_action_hover_color):
        """T·∫°o panel b√™n ph·∫£i (H√†ng ch·ªù, Log, Progress bar)."""
        right_panel_dl = ctk.CTkFrame(main_frame, fg_color=panel_bg_color, corner_radius=12)
        right_panel_dl.grid(row=0, column=1, pady=0, sticky="nsew")

        right_panel_dl.grid_columnconfigure(0, weight=1)
        right_panel_dl.grid_rowconfigure(0, weight=0)
        right_panel_dl.grid_rowconfigure(1, weight=1)
        right_panel_dl.grid_rowconfigure(2, weight=0)

        self.download_queue_section = ctk.CTkScrollableFrame(right_panel_dl, label_text="üìã H√†ng ch·ªù (Download)", label_font=("Poppins", 14, "bold"), height=150)
        self.download_queue_section.grid(row=0, column=0, sticky="ew", padx=10, pady=(10, 5))

        log_section_frame = ctk.CTkFrame(right_panel_dl, fg_color="transparent")
        log_section_frame.grid(row=1, column=0, sticky="nsew", padx=10, pady=(0, 5))
        log_section_frame.grid_rowconfigure(1, weight=1)
        log_section_frame.grid_columnconfigure(0, weight=1)

        log_header = ctk.CTkFrame(log_section_frame, fg_color="transparent")
        log_header.grid(row=0, column=0, sticky="ew", pady=(0, 4))
        ctk.CTkLabel(log_header, text="üìú Log T·∫£i Xu·ªëng:", font=("Poppins", 15, "bold")).pack(side="left", padx=(0,10))

        buttons_container_log_header = ctk.CTkFrame(log_header, fg_color=card_bg_color, corner_radius=6)
        buttons_container_log_header.pack(side="right", fill="x", expand=True, padx=(5,0))
        num_log_header_buttons = 4
        for i in range(num_log_header_buttons):
            buttons_container_log_header.grid_columnconfigure(i, weight=1)

        button_height_log = 28
        button_font_style_log = ("Poppins", 11)

        self.piu_button_dl_ref = ctk.CTkButton(
        buttons_container_log_header, text="üé¨ Piu...",
        height=button_height_log, font=button_font_style_log,
        command=lambda: webbrowser.open("https://www.youtube.com/@PiuKeTruyen"),
        fg_color=special_action_button_color,
        hover_color=special_action_hover_color
        )
        self.piu_button_dl_ref.grid(row=0, column=0, padx=(0,2), pady=2, sticky="ew")
        Tooltip(self.piu_button_dl_ref, "·ª¶ng h·ªô k√™nh Youtube 'Piu K·ªÉ Chuy·ªán' nh√©! ‚ù§")

        self.key_button_dl_ref = ctk.CTkButton(
        buttons_container_log_header, text="üîë Nh·∫≠p Key",
        height=button_height_log, font=button_font_style_log,
        command=lambda: self.master_app.prompt_and_activate("üîë Nh·∫≠p Key ƒê·ªÉ K√≠ch Ho·∫°t :"), # S·ª≠a: self.master_app.
        fg_color=("#29b369", "#009999"),
        hover_color=("#CC0000", "#CC0000"),
        text_color=("white", "white"),
        corner_radius=8
        )
        self.key_button_dl_ref.grid(row=0, column=1, padx=2, pady=2, sticky="ew")
        Tooltip(self.key_button_dl_ref, "Nh·∫≠p key ƒë·ªÉ k√≠ch ho·∫°t b·∫£n quy·ªÅn")

        self.update_button_dl_ref = ctk.CTkButton(
            buttons_container_log_header, text="üîî C·∫≠p nh·∫≠t",
            height=button_height_log, font=button_font_style_log,
            command=self.master_app.manual_check_update # S·ª≠a: self.master_app.
        )
        self.update_button_dl_ref.grid(row=0, column=2, padx=2, pady=2, sticky="ew")

        self.clear_log_button_ref = ctk.CTkButton(
            buttons_container_log_header, text="Clear Log",
            height=button_height_log, font=button_font_style_log,
            command=self.clear_download_log # H√†m ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang DownloadTab
        )
        self.clear_log_button_ref.grid(row=0, column=3, padx=(2,0), pady=2, sticky="ew")

        self.download_log_textbox = ctk.CTkTextbox(
            log_section_frame, wrap="word", font=("Consolas", 12), 
            state="disabled", fg_color=log_textbox_bg_color, border_width=1
        )
        self.download_log_textbox.grid(row=1, column=0, sticky="nsew", padx=0, pady=(2,0))
        try:
            self.download_log_textbox.configure(state="normal")
            self.download_log_textbox.insert("1.0", self.master_app.download_log_placeholder) # S·ª≠a: self.master_app.
            self.download_log_textbox.configure(state="disabled")
        except Exception as e:
            self.logger.error(f"L·ªói khi ch√®n placeholder v√†o download_log_textbox: {e}")

        self.download_progress_bar = ctk.CTkProgressBar(
        right_panel_dl,
        orientation="horizontal",
        height=15,
        progress_color=("#10B981", "#34D399"),
        fg_color=("#D4D8DB", "#4A4D50")
        )
        self.download_progress_bar.grid(row=2, column=0, sticky="ew", padx=10, pady=(5, 10))
        self.download_progress_bar.set(0)        

# D√°n v√†o cu·ªëi class DownloadTab trong file ui/tabs/download_tab.py

    def set_download_ui_state(self, downloading):
        """
        B·∫≠t/t·∫Øt c√°c n√∫t v√† th√†nh ph·∫ßn ƒëi·ªÅu khi·ªÉn c·ªßa tab Download.
        (ƒê√É ƒê∆Ø·ª¢C REFACTOR V√Ä CHUY·ªÇN SANG DownloadTab)
        """
        self.logger.info(f"[UI Download] ƒê·∫∑t tr·∫°ng th√°i, downloading={downloading}")
        self.master_app.is_downloading = downloading # S·ª≠a: self.master_app.

        # Ki·ªÉm tra b·∫£n quy·ªÅn t·ª´ master_app
        is_app_active = self.master_app._is_app_fully_activated() # S·ª≠a: self.master_app.

        target_state_normal = "normal" if is_app_active and not downloading else "disabled"
        stop_button_target = "normal" if is_app_active and downloading else "disabled"
        unactivated_text_short = "üîí K√≠ch ho·∫°t"

        # C√°c widget n√†y l√† 'self.' v√¨ ch√∫ng thu·ªôc v·ªÅ DownloadTab
        widgets_to_toggle = [
            self.download_start_button, self.all_button, self.add_sheet_button,
            self.download_playlist_check, self.download_video_quality_menu,
            self.download_audio_quality_menu, self.download_sound_check,
            self.download_shutdown_check, self.download_stop_on_error_check,
            self.download_rename_check, self.download_url_text,
            self.optimize_mobile_checkbox, self.disable_sheet_check_checkbox,
            self.auto_dub_checkbox, self.auto_upload_dl_checkbox,
            self.download_use_cookies_checkbox
        ]

        for widget in widgets_to_toggle:
            if widget and widget.winfo_exists():
                try:
                    widget.configure(state=target_state_normal)
                except Exception: pass # B·ªè qua l·ªói (v√≠ d·ª• CTkTextbox)

        # X·ª≠ l√Ω ri√™ng cho c√°c n√∫t c·∫ßn ƒë·ªïi text
        if not is_app_active:
            if self.download_start_button: self.download_start_button.configure(text="üîí K√≠ch ho·∫°t (T·∫£i)")
            if self.all_button: self.all_button.configure(text="üîí K√≠ch ho·∫°t (ALL)")
            if self.add_sheet_button: self.add_sheet_button.configure(text="üîí K√≠ch ho·∫°t (Sheet)")
        else:
            if self.download_start_button: self.download_start_button.configure(text="‚úÖ B·∫Øt ƒë·∫ßu T·∫£i (Ch·ªâ T·∫£i)")
            if self.all_button: self.all_button.configure(text="üöÄ ALL (D/S/D)")
            if self.add_sheet_button: self.add_sheet_button.configure(text="üìë Th√™m t·ª´ Sheet")

        if self.download_stop_button:
            self.download_stop_button.configure(state=stop_button_target)

        # X·ª≠ l√Ω placeholder cho √¥ URL
        if self.download_url_text:
            current_text = self.download_url_text.get("1.0", "end-1c")
            placeholder = self.master_app.download_url_placeholder # S·ª≠a: self.master_app.
            if not is_app_active:
                if current_text != placeholder:
                    self.download_url_text.delete("1.0", "end")
                    self.download_url_text.insert("1.0", placeholder)
            else:
                if current_text == placeholder:
                    self.download_url_text.delete("1.0", "end")

        # G·ªçi c√°c h√†m toggle ƒë·ªÉ kh·ªüi t·∫°o tr·∫°ng th√°i ban ƒë·∫ßu
        self.master_app.after(10, self.toggle_download_sound_button)
        self.master_app.after(20, self.toggle_download_rename_entry)
        self.master_app.after(30, self.master_app._toggle_cookies_button_state)

    def select_download_path(self):
        """ M·ªü dialog ch·ªçn th∆∞ m·ª•c l∆∞u file t·∫£i v·ªÅ """
        initial_dir = self.master_app.download_path_var.get() or get_default_downloads_folder()
        path = filedialog.askdirectory(initialdir=initial_dir, parent=self.master_app)
        if path:
            self.master_app.download_path_var.set(path)
            self.logger.info(f"ƒê√£ ch·ªçn ƒë∆∞·ªùng d·∫´n t·∫£i v·ªÅ: {path}")
        else:
            self.logger.info("ƒê√£ h·ªßy ch·ªçn ƒë∆∞·ªùng d·∫´n t·∫£i v·ªÅ.")

    def open_download_folder(self):
        """ M·ªü th∆∞ m·ª•c t·∫£i v·ªÅ hi·ªán t·∫°i """
        current_path = self.master_app.download_path_var.get()
        if current_path and os.path.isdir(current_path):
            self.logger.info(f"ƒêang m·ªü th∆∞ m·ª•c t·∫£i v·ªÅ: {current_path}")
            open_file_with_default_app(current_path)
        else:
            messagebox.showwarning("L·ªói", "ƒê∆∞·ªùng d·∫´n t·∫£i v·ªÅ kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ch·ªçn.", parent=self.master_app)
            self.logger.warning(f"ƒê∆∞·ªùng d·∫´n t·∫£i v·ªÅ kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã thi·∫øu: {current_path}")

    def toggle_download_rename_entry(self):
        """Hi·ªán/·∫©n √¥ nh·∫≠p t√™n chung khi checkbox 'ƒê·ªïi t√™n h√†ng lo·∫°t' thay ƒë·ªïi."""
        if not hasattr(self, 'download_rename_entry') or not self.download_rename_entry:
            return
        
        if self.master_app.download_rename_var.get():
            # Hi·ªán entry v√† cho ph√©p nh·∫≠p
            self.download_rename_entry_frame.pack(fill="x", padx=10, pady=(0, 10))
            self.download_rename_entry.configure(state="normal")
        else:
            # ·∫®n entry
            self.download_rename_entry_frame.pack_forget()
            self.download_rename_entry.configure(state="disabled")

    def select_download_sound(self):
        """ M·ªü dialog ch·ªçn file √¢m thanh """
        initial_dir = os.path.dirname(self.master_app.download_sound_path_var.get()) if self.master_app.download_sound_path_var.get() else "."
        f = filedialog.askopenfilename(
            initialdir=initial_dir,
            filetypes=[("Audio files", "*.wav *.mp3")],
            title="Ch·ªçn file √¢m thanh th√¥ng b√°o",
            parent=self.master_app
        )
        if f and os.path.isfile(f):
             self.master_app.download_sound_path_var.set(f)
             self.logger.info(f"ƒê√£ ch·ªçn file √¢m thanh download: {f}")
             self.master_app.save_current_config()
        elif f:
             messagebox.showwarning("File kh√¥ng t·ªìn t·∫°i", f"ƒê∆∞·ªùng d·∫´n file ƒë√£ ch·ªçn kh√¥ng h·ª£p l·ªá:\n{f}", parent=self.master_app)

    def _select_cookies_file(self):
        """M·ªü dialog ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn file cookies.txt."""
        initial_dir = os.path.dirname(self.master_app.download_cookies_path_var.get()) if self.master_app.download_cookies_path_var.get() else get_default_downloads_folder()
        filepath = filedialog.askopenfilename(
            title="Ch·ªçn file cookies.txt",
            initialdir=initial_dir,
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")],
            parent=self.master_app
        )
        if filepath:
            self.master_app.download_cookies_path_var.set(filepath)
            self._update_cookies_label()  # G·ªçi t·ª´ DownloadTab
            self.master_app.save_current_config() # L∆∞u l·∫°i l·ª±a ch·ªçn
    
    def _update_cookies_label(self):
        """C·∫≠p nh·∫≠t label hi·ªÉn th·ªã ƒë∆∞·ªùng d·∫´n file cookies"""
        lbl = getattr(self, 'download_cookies_path_label', None)
        if lbl and lbl.winfo_exists():
            SUCCESS_COLOR = ("#0B8457", "lightgreen")
            ERROR_COLOR = ("#B71C1C", "#FF8A80")
            WARNING_COLOR = ("#E65100", "#FFB74D")
            DEFAULT_COLOR = ("gray30", "gray70")
            path = self.master_app.download_cookies_path_var.get()
            if self.master_app.download_use_cookies_var.get():
                if path and os.path.exists(path):
                    lbl.configure(text=f"--ƒê√£ ch·ªçn: {os.path.basename(path)}", text_color=SUCCESS_COLOR)
                elif path:
                    lbl.configure(text=f"L·ªói: File '{os.path.basename(path)}' kh√¥ng t·ªìn t·∫°i!", text_color=ERROR_COLOR)
                else:
                    lbl.configure(text="(Vui l√≤ng ch·ªçn file cookies.txt)", text_color=WARNING_COLOR)
            else:
                lbl.configure(text="(T√≠nh nƒÉng cookies ƒëang t·∫Øt)", text_color=DEFAULT_COLOR)

    def clear_download_log(self):
        """ X√≥a n·ªôi dung trong √¥ log download """
        log_widget = getattr(self, 'download_log_textbox', None)
        if log_widget and log_widget.winfo_exists():
            try:
                log_widget.configure(state="normal")
                log_widget.delete("1.0", "end")
                # === TH√äM ƒêO·∫†N N√ÄY ===
                placeholder_to_insert = getattr(self.master_app, 'download_log_placeholder', "[Log v√† tr·∫°ng th√°i t·∫£i xu·ªëng s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y... C√°m ∆°n m·ªçi ng∆∞·ªùi ƒë√£ s·ª≠ d·ª•ng ph·∫ßn m·ªÅm Piu.]")
                log_widget.insert("1.0", placeholder_to_insert)
                # === K·∫æT TH√öC ===
                log_widget.configure(state="disabled")
                self.logger.info("Ng∆∞·ªùi d√πng ƒë√£ x√≥a log download (v√† placeholder ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i).")
            except Exception as e:
                self.logger.error(f"L·ªói khi x√≥a log download: {e}")

    def toggle_download_sound_button(self):
        """B·∫≠t/t·∫Øt n√∫t √¢m thanh khi t·∫£i"""
        btn = getattr(self, 'download_sound_button', None)
        if not (btn and btn.winfo_exists()):
            return
        try:
            is_active = self.master_app._is_app_fully_activated()
            is_downloading = bool(getattr(self.master_app, 'is_downloading', False))
            sound_enabled = bool(self.master_app.download_sound_var.get()) if (
                hasattr(self.master_app, 'download_sound_var') and self.master_app.download_sound_var
            ) else False
            can_enable = is_active and (not is_downloading) and sound_enabled
            target_state = "normal" if can_enable else "disabled"
            if str(btn.cget("state")) != target_state:
                btn.configure(state=target_state)
        except Exception as e:
            self.logger.error(f"L·ªói b·∫≠t/t·∫Øt n√∫t √¢m thanh download: {e}")

    def _reenable_fetch_button(self):
        """B·∫≠t l·∫°i n√∫t 'Th√™m t·ª´ Sheet' sau khi x·ª≠ l√Ω xong"""
        if hasattr(self, 'add_sheet_button') and self.add_sheet_button and self.add_sheet_button.winfo_exists():
            try:
                self.add_sheet_button.configure(state="normal", text="üìë Th√™m t·ª´ Sheet")
            except Exception as e:
                self.logger.warning(f"Kh√¥ng th·ªÉ b·∫≠t l·∫°i n√∫t Th√™m t·ª´ Sheet: {e}")
        else:
            self.logger.warning("Kh√¥ng th·ªÉ b·∫≠t l·∫°i n√∫t 'Th√™m t·ª´ Sheet': Kh√¥ng t√¨m th·∫•y tham chi·∫øu ho·∫∑c n√∫t ƒë√£ b·ªã h·ªßy.")

    def update_download_progress(self, value):
        """C·∫≠p nh·∫≠t progress bar download (thread-safe) - Gi√° tr·ªã t·ª´ 0 ƒë·∫øn 100"""
        self.logger.debug(f"DEBUG C·∫¨P NH·∫¨T PROGRESS: Nh·∫≠n gi√° tr·ªã = {value}")
        if hasattr(self, 'download_progress_bar') and self.download_progress_bar and self.download_progress_bar.winfo_exists():
            def _update():
                try:
                    value_float = float(value) / 100.0
                    value_clamped = max(0.0, min(1.0, value_float))
                    self.download_progress_bar.set(value_clamped)
                except Exception as e:
                    self.logger.warning(f"L·ªói c·∫≠p nh·∫≠t progress bar download: {e}")
            self.master_app.after(0, _update)

    def set_download_progress_indeterminate(self, start=True):
        """ƒê·∫∑t progress bar download ·ªü ch·∫ø ƒë·ªô indeterminate (m√¥ ph·ªèng)"""
        if hasattr(self, 'download_progress_bar') and self.download_progress_bar and self.download_progress_bar.winfo_exists():
            if start:
                self.logger.debug("M√¥ ph·ªèng progress indeterminate (ƒë·∫∑t v·ªÅ 0)")
            else:
                self.logger.debug("ƒê·∫∑t progress bar tr·ªü l·∫°i ch·∫ø ƒë·ªô determinate")

    def log_download(self, message):
        """Ghi log v√†o √¥ Download Log (thread-safe)"""
        log_widget = getattr(self, 'download_log_textbox', None)
        if log_widget and log_widget.winfo_exists():
            if not message.endswith('\n'):
                message += '\n'

            def _insert_task_with_state_change():
                try:
                    log_widget.configure(state="normal")

                    current_content_full = log_widget.get("1.0", "end-1c")
                    placeholder_to_check = getattr(self.master_app, 'download_log_placeholder', "")

                    if placeholder_to_check and current_content_full == placeholder_to_check:
                        log_widget.delete("1.0", "end")

                    log_widget.insert("end", message)
                    log_widget.see("end")
                    log_widget.configure(state="disabled")
                except Exception as e:
                    self.logger.error(f"L·ªói trong qu√° tr√¨nh ch√®n/thay ƒë·ªïi tr·∫°ng th√°i log: {e}")

            self.master_app.after(0, _insert_task_with_state_change)
        else:
            self.logger.info(f"[D·ª± ph√≤ng Log Download] {message.strip()}")
