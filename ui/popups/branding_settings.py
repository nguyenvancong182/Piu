"""
BrandingSettingsWindow class for Piu application.
Manages branding settings: logo, intro, and outro configuration.
"""
import customtkinter as ctk
import logging
import os
import json
from tkinter import filedialog, messagebox

# Import helpers
from utils.helpers import get_default_downloads_folder
from config.settings import save_config


class BrandingSettingsWindow(ctk.CTkToplevel):
# Kh·ªüi t·∫°o Giao di·ªán
    def __init__(self, master_app):
        super().__init__(master_app)
        self.master_app = master_app

        self.title("üñºÔ∏è C√†i ƒë·∫∑t Logo, Intro & Outro")
        # THAY ƒê·ªîI K√çCH TH∆Ø·ªöC ·ªû ƒê√ÇY
        desired_popup_width = 620
        desired_popup_height = 520
        self.geometry(f"{desired_popup_width}x{desired_popup_height}")
        
        self.resizable(False, False)
        self.attributes("-topmost", True)
        self.grab_set()

        # CƒÉn gi·ªØa c·ª≠a s·ªï
        try:
            master_app.update_idletasks()
            self.update_idletasks()
            
            master_x = master_app.winfo_x()
            master_y = master_app.winfo_y()
            master_width = master_app.winfo_width()
            master_height = master_app.winfo_height()
            
            # S·ª≠ d·ª•ng k√≠ch th∆∞·ªõc mong mu·ªën n·∫øu winfo_width/height tr·∫£ v·ªÅ gi√° tr·ªã kh√¥ng ƒë√°ng tin c·∫≠y
            popup_width_actual = self.winfo_width()
            popup_height_actual = self.winfo_height()

            final_popup_width = desired_popup_width if popup_width_actual <= 1 else popup_width_actual
            final_popup_height = desired_popup_height if popup_height_actual <= 1 else popup_height_actual
            
            position_x = master_x + (master_width // 2) - (final_popup_width // 2)
            position_y = master_y + (master_height // 2) - (final_popup_height // 2)
            
            screen_width = self.winfo_screenwidth()
            screen_height = self.winfo_screenheight()
            
            if position_x + final_popup_width > screen_width:
                position_x = screen_width - final_popup_width
            if position_y + final_popup_height > screen_height:
                position_y = screen_height - final_popup_height
            if position_x < 0: position_x = 0
            if position_y < 0: position_y = 0
                
            self.geometry(f"{final_popup_width}x{final_popup_height}+{int(position_x)}+{int(position_y)}")
            logging.info(f"BrandingSettingsWindow: ƒê√£ cƒÉn gi·ªØa t·∫°i ({int(position_x)}, {int(position_y)}) v·ªõi k√≠ch th∆∞·ªõc {final_popup_width}x{final_popup_height}")

        except Exception as e:
            logging.warning(f"Kh√¥ng th·ªÉ cƒÉn gi·ªØa c·ª≠a s·ªï BrandingSettingsWindow: {e}")
            # N·∫øu l·ªói, v·∫´n gi·ªØ geometry ƒë√£ ƒë·∫∑t ·ªü tr√™n
            self.geometry(f"{desired_popup_width}x{desired_popup_height}")

        # --- C√°c bi·∫øn StringVar c·ª•c b·ªô cho c√°c Entry s·ªë ---
        self.logo_size_percent_str_var = ctk.StringVar(
            value=str(self.master_app.branding_logo_size_percent_var.get())
        )
        self.logo_margin_px_str_var = ctk.StringVar(
            value=str(self.master_app.branding_logo_margin_px_var.get())
        )

        self.main_scroll_frame = ctk.CTkScrollableFrame(self, fg_color="transparent")
        self.main_scroll_frame.pack(expand=True, fill="both", padx=15, pady=15)
        
        self._create_widgets()

        self.bottom_button_frame = ctk.CTkFrame(self, fg_color="transparent")
        self.bottom_button_frame.pack(fill="x", padx=15, pady=(0, 15), side="bottom")

        self.cancel_button = ctk.CTkButton(self.bottom_button_frame, text="H·ªßy", width=100, command=self._on_close_window)
        self.cancel_button.pack(side="right", padx=(10, 0))

        self.save_button = ctk.CTkButton(self.bottom_button_frame, text="L∆∞u C√†i ƒê·∫∑t", width=120, command=self._save_settings_and_close, fg_color="#1f6aa5")
        self.save_button.pack(side="right")

        self.protocol("WM_DELETE_WINDOW", self._on_close_window)
        self.after(10, self._update_dependent_controls_state) # G·ªçi sau ch√∫t ƒë·ªÉ UI k·ªãp t·∫°o

# B√™n trong l·ªõp BrandingSettingsWindow

    def _create_widgets(self):
        """T·∫°o c√°c widget con cho c·ª≠a s·ªï c√†i ƒë·∫∑t branding."""
        label_font_ui = ("Segoe UI", 12)
        section_font_ui = ("Segoe UI", 13, "bold")

        # === Nh√≥m: Nh·∫≠p / Xu·∫•t C·∫•u h√¨nh Branding ===
        config_group_frame = ctk.CTkFrame(self.main_scroll_frame)
        config_group_frame.pack(fill="x", pady=(0, 15), padx=5)
        ctk.CTkLabel(config_group_frame, text="‚öôÔ∏è Qu·∫£n l√Ω C·∫•u h√¨nh Branding (File .json):", font=section_font_ui, anchor="w").pack(fill="x", padx=5, pady=(5,5))

        config_controls_frame = ctk.CTkFrame(config_group_frame, fg_color="transparent")
        config_controls_frame.pack(fill="x", padx=10, pady=5)
        config_controls_frame.grid_columnconfigure((0, 1), weight=1) # Chia ƒë·ªÅu kh√¥ng gian cho 2 n√∫t

        self.import_branding_button = ctk.CTkButton(config_controls_frame, text="Nh·∫≠p t·ª´ File...", command=self._import_branding_from_file)
        self.import_branding_button.grid(row=0, column=0, padx=(0, 5), sticky="ew")

        self.export_branding_button = ctk.CTkButton(config_controls_frame, text="Xu·∫•t ra File...", command=self._export_branding_to_file)
        self.export_branding_button.grid(row=0, column=1, padx=(5, 0), sticky="ew")

        # === Ph·∫ßn Intro Video ===
        # S·ª¨A ·ªû ƒê√ÇY: G√°n cho self.intro_frame TR∆Ø·ªöC khi d√πng
        self.intro_frame = ctk.CTkFrame(self.main_scroll_frame)
        self.intro_frame.pack(fill="x", pady=(0, 10), padx=5)
        # B√¢y gi·ªù m·ªõi c·∫•u h√¨nh c·ªôt cho self.intro_frame
        self.intro_frame.grid_columnconfigure(1, weight=1) # Cho label ƒë∆∞·ªùng d·∫´n gi√£n ra

        self.intro_enabled_checkbox = ctk.CTkCheckBox(
            self.intro_frame, # S·ª≠ d·ª•ng self.intro_frame
            text="üé¨ Th√™m Video Intro",
            variable=self.master_app.branding_intro_enabled_var,
            font=label_font_ui,
            command=lambda: self._update_dependent_controls_state("intro_video")            
        )
        self.intro_enabled_checkbox.grid(row=0, column=0, columnspan=3, padx=5, pady=5, sticky="w")

        self.intro_path_label = ctk.CTkLabel(self.intro_frame, text="ƒê∆∞·ªùng d·∫´n: (Ch∆∞a ch·ªçn)", anchor="w", wraplength=350, text_color="gray", font=("Segoe UI", 10))
        self.intro_path_label.grid(row=1, column=0, columnspan=2, padx=(25, 5), pady=2, sticky="ew")
        
        self.select_intro_button = ctk.CTkButton(self.intro_frame, text="Ch·ªçn File Intro...", width=120, command=self._select_intro_file)
        self.select_intro_button.grid(row=1, column=2, padx=5, pady=2, sticky="e")
        self._update_path_label(self.intro_path_label, self.master_app.branding_intro_path_var.get())

        ### TH√äM KH·ªêI CODE N√ÄY V√ÄO NGAY SAU KH·ªêI INTRO VIDEO ###
        # === Ph·∫ßn Intro t·ª´ ·∫¢nh ===
        self.intro_image_frame = ctk.CTkFrame(self.main_scroll_frame, fg_color="transparent")
        self.intro_image_frame.pack(fill="x", pady=(0, 10), padx=20) # Th·ª•t v√†o m·ªôt ch√∫t
        self.intro_image_frame.grid_columnconfigure(1, weight=1)

        self.intro_from_image_checkbox = ctk.CTkCheckBox(
            self.intro_image_frame,
            text="T·∫°o Intro t·ª´ ·∫¢nh",
            variable=self.master_app.branding_intro_from_image_enabled_var,
            font=label_font_ui,
            command=lambda: self._update_dependent_controls_state("intro_image")
        )
        self.intro_from_image_checkbox.grid(row=0, column=0, columnspan=3, padx=5, pady=2, sticky="w")

        self.intro_image_path_label = ctk.CTkLabel(self.intro_image_frame, text="ƒê∆∞·ªùng d·∫´n ·∫£nh: (Ch∆∞a ch·ªçn)", anchor="w", wraplength=280, text_color="gray", font=("Segoe UI", 9))
        self.intro_image_path_label.grid(row=1, column=0, columnspan=2, padx=(20, 5), pady=2, sticky="ew")
        self.select_intro_image_button = ctk.CTkButton(self.intro_image_frame, text="Ch·ªçn ·∫¢nh...", width=100, command=self._select_intro_image)
        self.select_intro_image_button.grid(row=1, column=2, padx=5, pady=2, sticky="e")

        ctk.CTkLabel(self.intro_image_frame, text="Th·ªùi l∆∞·ª£ng (gi√¢y):", anchor="e", font=label_font_ui).grid(row=2, column=0, padx=(20, 2), pady=2, sticky="e")
        self.intro_image_duration_entry = ctk.CTkEntry(self.intro_image_frame, textvariable=self.master_app.branding_intro_image_duration_var, width=70)
        self.intro_image_duration_entry.grid(row=2, column=1, padx=5, pady=2, sticky="w")
        ### K·∫æT TH√öC TH√äM M·ªöI ###

        # === Ph·∫ßn Outro Video ===
        # T∆∞∆°ng t·ª±, g√°n cho self.outro_frame TR∆Ø·ªöC khi d√πng
        self.outro_frame = ctk.CTkFrame(self.main_scroll_frame)
        self.outro_frame.pack(fill="x", pady=(0, 10), padx=5)
        self.outro_frame.grid_columnconfigure(1, weight=1)

        self.outro_enabled_checkbox = ctk.CTkCheckBox(
            self.outro_frame, # S·ª≠ d·ª•ng self.outro_frame
            text="üé¨ Th√™m Video Outro",
            variable=self.master_app.branding_outro_enabled_var,
            font=label_font_ui,
            command=lambda: self._update_dependent_controls_state("outro_video")
        )
        self.outro_enabled_checkbox.grid(row=0, column=0, columnspan=3, padx=5, pady=5, sticky="w")

        self.outro_path_label = ctk.CTkLabel(self.outro_frame, text="ƒê∆∞·ªùng d·∫´n: (Ch∆∞a ch·ªçn)", anchor="w", wraplength=350, text_color="gray", font=("Segoe UI", 10))
        self.outro_path_label.grid(row=1, column=0, columnspan=2, padx=(25, 5), pady=2, sticky="ew")

        self.select_outro_button = ctk.CTkButton(self.outro_frame, text="Ch·ªçn File Outro...", width=120, command=self._select_outro_file)
        self.select_outro_button.grid(row=1, column=2, padx=5, pady=2, sticky="e")
        self._update_path_label(self.outro_path_label, self.master_app.branding_outro_path_var.get())

        ### TH√äM KH·ªêI CODE N√ÄY V√ÄO NGAY SAU KH·ªêI OUTRO VIDEO ###
        # === Ph·∫ßn Outro t·ª´ ·∫¢nh ===
        self.outro_image_frame = ctk.CTkFrame(self.main_scroll_frame, fg_color="transparent")
        self.outro_image_frame.pack(fill="x", pady=(0, 10), padx=20)
        self.outro_image_frame.grid_columnconfigure(1, weight=1)

        self.outro_from_image_checkbox = ctk.CTkCheckBox(
            self.outro_image_frame,
            text="T·∫°o Outro t·ª´ ·∫¢nh",
            variable=self.master_app.branding_outro_from_image_enabled_var,
            font=label_font_ui,
            command=lambda: self._update_dependent_controls_state("outro_image")
        )
        self.outro_from_image_checkbox.grid(row=0, column=0, columnspan=3, padx=5, pady=2, sticky="w")

        self.outro_image_path_label = ctk.CTkLabel(self.outro_image_frame, text="ƒê∆∞·ªùng d·∫´n ·∫£nh: (Ch∆∞a ch·ªçn)", anchor="w", wraplength=280, text_color="gray", font=("Segoe UI", 9))
        self.outro_image_path_label.grid(row=1, column=0, columnspan=2, padx=(20, 5), pady=2, sticky="ew")
        self.select_outro_image_button = ctk.CTkButton(self.outro_image_frame, text="Ch·ªçn ·∫¢nh...", width=100, command=self._select_outro_image)
        self.select_outro_image_button.grid(row=1, column=2, padx=5, pady=2, sticky="e")

        ctk.CTkLabel(self.outro_image_frame, text="Th·ªùi l∆∞·ª£ng (gi√¢y):", anchor="e", font=label_font_ui).grid(row=2, column=0, padx=(20, 2), pady=2, sticky="e")
        self.outro_image_duration_entry = ctk.CTkEntry(self.outro_image_frame, textvariable=self.master_app.branding_outro_image_duration_var, width=70)
        self.outro_image_duration_entry.grid(row=2, column=1, padx=5, pady=2, sticky="w")
        ### K·∫æT TH√öC TH√äM M·ªöI ###

        # === Ph·∫ßn Logo (Watermark) ===
        # G√°n cho self.logo_main_frame TR∆Ø·ªöC khi d√πng
        self.logo_main_frame = ctk.CTkFrame(self.main_scroll_frame)
        self.logo_main_frame.pack(fill="x", pady=(0, 5), padx=5)
        self.logo_main_frame.grid_columnconfigure(1, weight=1)

        self.logo_enabled_checkbox = ctk.CTkCheckBox(
            self.logo_main_frame, # S·ª≠ d·ª•ng self.logo_main_frame
            text="üñº Ch√®n Logo (Watermark)",
            variable=self.master_app.branding_logo_enabled_var,
            font=label_font_ui,
            command=self._update_dependent_controls_state 
        )
        self.logo_enabled_checkbox.grid(row=0, column=0, columnspan=3, padx=5, pady=(5,0), sticky="w")

        self.logo_path_label = ctk.CTkLabel(self.logo_main_frame, text="ƒê∆∞·ªùng d·∫´n: (Ch∆∞a ch·ªçn)", anchor="w", wraplength=350, text_color="gray", font=("Segoe UI", 10))
        self.logo_path_label.grid(row=1, column=0, columnspan=2, padx=(25, 5), pady=2, sticky="ew")
        self.select_logo_button = ctk.CTkButton(self.logo_main_frame, text="Ch·ªçn File Logo...", width=120, command=self._select_logo_file)
        self.select_logo_button.grid(row=1, column=2, padx=5, pady=2, sticky="e")
        self._update_path_label(self.logo_path_label, self.master_app.branding_logo_path_var.get())

        # Frame con cho c√°c c√†i ƒë·∫∑t chi ti·∫øt c·ªßa Logo
        self.logo_settings_frame = ctk.CTkFrame(self.main_scroll_frame, fg_color="transparent")
        # KH√îNG pack/grid self.logo_settings_frame ·ªü ƒë√¢y, _update_dependent_controls_state s·∫Ω l√†m
        self.logo_settings_frame.grid_columnconfigure(1, weight=1) 

        # V·ªã tr√≠ Logo
        ctk.CTkLabel(self.logo_settings_frame, text="V·ªã tr√≠ Logo:", anchor="e", font=label_font_ui).grid(row=0, column=0, padx=(20,2), pady=5, sticky="e")
        self.logo_position_menu = ctk.CTkOptionMenu(
            self.logo_settings_frame, variable=self.master_app.branding_logo_position_var,
            values=["bottom_right", "bottom_left", "top_right", "top_left", "center"]
        )
        self.logo_position_menu.grid(row=0, column=1, columnspan=2, padx=5, pady=5, sticky="ew")
        # ... (c√°c widget c√≤n l·∫°i c·ªßa logo_settings_frame) ...
        ctk.CTkLabel(self.logo_settings_frame, text="ƒê·ªô m·ªù (0-100%):", anchor="e", font=label_font_ui).grid(row=1, column=0, padx=(20,2), pady=5, sticky="e")
        self.logo_opacity_slider = ctk.CTkSlider(
            self.logo_settings_frame, from_=0, to=100, number_of_steps=100,
            variable=self.master_app.branding_logo_opacity_var, command=self._update_opacity_label
        )
        self.logo_opacity_slider.grid(row=1, column=1, padx=5, pady=5, sticky="ew")
        self.logo_opacity_value_label = ctk.CTkLabel(self.logo_settings_frame, text=f"{self.master_app.branding_logo_opacity_var.get()}%", width=40, font=("Segoe UI", 11))
        self.logo_opacity_value_label.grid(row=1, column=2, padx=5, pady=5, sticky="w")

        ctk.CTkLabel(self.logo_settings_frame, text="K√≠ch th∆∞·ªõc (% video width):", anchor="e", font=label_font_ui).grid(row=2, column=0, padx=(20,2), pady=5, sticky="e")
        self.logo_size_entry = ctk.CTkEntry(self.logo_settings_frame, textvariable=self.logo_size_percent_str_var, width=60)
        self.logo_size_entry.grid(row=2, column=1, padx=5, pady=5, sticky="w")
        ctk.CTkLabel(self.logo_settings_frame, text="%").grid(row=2, column=2, padx=0, pady=5, sticky="w")

        ctk.CTkLabel(self.logo_settings_frame, text="L·ªÅ Logo (pixels):", anchor="e", font=label_font_ui).grid(row=3, column=0, padx=(20,2), pady=5, sticky="e")
        self.logo_margin_entry = ctk.CTkEntry(self.logo_settings_frame, textvariable=self.logo_margin_px_str_var, width=60)
        self.logo_margin_entry.grid(row=3, column=1, padx=5, pady=5, sticky="w")
        ctk.CTkLabel(self.logo_settings_frame, text="px").grid(row=3, column=2, padx=0, pady=5, sticky="w")


    def _validate_and_save_settings(self): # ƒê·∫£m b·∫£o h√†m n√†y validate ƒë√∫ng bi·∫øn c·ªßa Branding
        logging.debug("[BrandingSettingsWindow] B·∫Øt ƒë·∫ßu _validate_and_save_settings cho Branding.")
        try:
            # Opacity (t·ª´ Slider, d√πng IntVar)
            try:
                opacity_val = self.master_app.branding_logo_opacity_var.get()
                if not (0 <= opacity_val <= 100):
                    self.master_app.branding_logo_opacity_var.set(max(0, min(100, opacity_val)))
            except Exception:
                 self.master_app.branding_logo_opacity_var.set(80) # M·∫∑c ƒë·ªãnh

            # K√≠ch th∆∞·ªõc Logo (t·ª´ Entry, d√πng StringVar -> IntVar)
            size_str = self.logo_size_percent_str_var.get().strip()
            if not size_str: self.master_app.branding_logo_size_percent_var.set(10) # M·∫∑c ƒë·ªãnh
            else:
                try:
                    size_val = int(size_str)
                    if not (1 <= size_val <= 100):
                        messagebox.showerror("Gi√° tr·ªã kh√¥ng h·ª£p l·ªá", "K√≠ch th∆∞·ªõc logo ph·∫£i t·ª´ 1 ƒë·∫øn 100%.", parent=self)
                        return False
                    self.master_app.branding_logo_size_percent_var.set(size_val)
                except ValueError:
                    messagebox.showerror("Gi√° tr·ªã kh√¥ng h·ª£p l·ªá", "K√≠ch th∆∞·ªõc logo ph·∫£i l√† s·ªë nguy√™n.", parent=self)
                    return False

            # L·ªÅ Logo (t·ª´ Entry, d√πng StringVar -> IntVar)
            margin_str = self.logo_margin_px_str_var.get().strip()
            if not margin_str: self.master_app.branding_logo_margin_px_var.set(10) # M·∫∑c ƒë·ªãnh
            else:
                try:
                    margin_val = int(margin_str)
                    if margin_val < 0: # C√≥ th·ªÉ cho ph√©p l·ªÅ √¢m n·∫øu FFmpeg h·ªó tr·ª£, nh∆∞ng th∆∞·ªùng l√† kh√¥ng √¢m
                        messagebox.showerror("Gi√° tr·ªã kh√¥ng h·ª£p l·ªá", "L·ªÅ logo ph·∫£i l√† s·ªë kh√¥ng √¢m.", parent=self)
                        return False
                    self.master_app.branding_logo_margin_px_var.set(margin_val)
                except ValueError:
                    messagebox.showerror("Gi√° tr·ªã kh√¥ng h·ª£p l·ªá", "L·ªÅ logo ph·∫£i l√† s·ªë nguy√™n.", parent=self)
                    return False
            
            # C√°c ki·ªÉm tra kh√°c cho ƒë∆∞·ªùng d·∫´n file intro, outro, logo n·∫øu c·∫ßn (ƒë·∫£m b·∫£o file t·ªìn t·∫°i n·∫øu checkbox ƒë∆∞·ª£c ch·ªçn)
            if self.master_app.branding_intro_enabled_var.get() and not (self.master_app.branding_intro_path_var.get() and os.path.exists(self.master_app.branding_intro_path_var.get())):
                messagebox.showerror("Thi·∫øu File", "ƒê√£ b·∫≠t Video Intro nh∆∞ng ch∆∞a ch·ªçn file ho·∫∑c file kh√¥ng t·ªìn t·∫°i.", parent=self)
                return False
            # T∆∞∆°ng t·ª± cho Outro v√† Logo...

            logging.info("[BrandingSettingsWindow] X√°c th·ª±c c√†i ƒë·∫∑t Branding th√†nh c√¥ng.")
            return True
        except Exception as e_val:
            logging.error(f"[BrandingSettingsWindow] L·ªói validation: {e_val}", exc_info=True)
            messagebox.showerror("L·ªói Validate", f"L·ªói khi ki·ªÉm tra gi√° tr·ªã c√†i ƒë·∫∑t:\n{e_val}", parent=self)
            return False

    def _save_settings_and_close(self):
        # (N·ªôi dung h√†m n√†y nh∆∞ ƒë√£ cung c·∫•p ·ªü l·∫ßn tr·∫£ l·ªùi tr∆∞·ªõc, n√≥ g·ªçi _validate_and_save_settings)
        logging.info("[BrandingSettingsWindow] N√∫t 'L∆∞u v√† ƒê√≥ng' (Branding) ƒë∆∞·ª£c nh·∫•n.")
        if self._validate_and_save_settings():
            try:
                self.master_app.save_current_config()
                logging.info("[BrandingSettingsWindow] ƒê√£ l∆∞u config branding.")
            except Exception as e_save:
                logging.error(f"[BrandingSettingsWindow] L·ªói l∆∞u config: {e_save}", exc_info=True)
                messagebox.showerror("L·ªói L∆∞u", f"L·ªói khi l∆∞u c·∫•u h√¨nh: {e_save}", parent=self)
                return # Kh√¥ng ƒë√≥ng n·∫øu l·ªói l∆∞u
            self._on_close_window() # ƒê√≥ng c·ª≠a s·ªï
        else:
            logging.warning("[BrandingSettingsWindow] Validation th·∫•t b·∫°i, kh√¥ng l∆∞u v√† kh√¥ng ƒë√≥ng.")


    def _on_close_window(self):
        logging.info("[BrandingSettingsWindow] C·ª≠a s·ªï Branding ƒëang ƒë∆∞·ª£c ƒë√≥ng.")
        if hasattr(self, 'grab_status') and self.grab_status() != "none":
            try: self.grab_release()
            except Exception: pass
        try: self.destroy()
        except Exception: pass

    def _update_path_label(self, label_widget, path_value):
        """C·∫≠p nh·∫≠t label hi·ªÉn th·ªã ƒë∆∞·ªùng d·∫´n, v·ªõi m√†u s·∫Øc t∆∞∆°ng th√≠ch Light/Dark mode."""
        
        # ƒê·ªãnh nghƒ©a c√°c c·∫∑p m√†u cho t·ª´ng tr·∫°ng th√°i
        # Tuple: (m√†u cho ch·∫ø ƒë·ªô S√°ng, m√†u cho ch·∫ø ƒë·ªô T·ªëi)
        SUCCESS_COLOR = ("#0B8457", "lightgreen")
        ERROR_COLOR = ("#B71C1C", "#FF8A80")
        DEFAULT_COLOR = ("gray30", "gray70")

        if not label_widget or not label_widget.winfo_exists():
            return

        if path_value and os.path.exists(path_value):
            # hi·ªÉn th·ªã ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß >>>
            label_widget.configure(text=f"ƒê√£ ch·ªçn: {path_value}", text_color=SUCCESS_COLOR)
        elif path_value:
            # hi·ªÉn th·ªã ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß >>>
            label_widget.configure(text=f"L·ªñI: '{path_value}' kh√¥ng t·ªìn t·∫°i!", text_color=ERROR_COLOR)
        else:
            label_widget.configure(text="ƒê∆∞·ªùng d·∫´n: (Ch∆∞a ch·ªçn)", text_color=DEFAULT_COLOR)

    def _select_intro_file(self):
        initial_dir = os.path.dirname(self.master_app.branding_intro_path_var.get()) if self.master_app.branding_intro_path_var.get() and os.path.exists(os.path.dirname(self.master_app.branding_intro_path_var.get())) else get_default_downloads_folder()
        file_path = filedialog.askopenfilename(title="Ch·ªçn Video Intro", initialdir=initial_dir, filetypes=(("Video files", "*.mp4 *.avi *.mkv *.mov *.webm"), ("All files", "*.*")), parent=self)
        if file_path:
            self.master_app.branding_intro_path_var.set(file_path)
            self._update_path_label(self.intro_path_label, file_path)
        self._update_dependent_controls_state()

    def _select_intro_image(self):
        file_path = filedialog.askopenfilename(title="Ch·ªçn ·∫¢nh cho Intro", filetypes=[("Image Files", "*.png *.jpg *.jpeg *.webp")], parent=self)
        if file_path:
            self.master_app.branding_intro_image_path_var.set(file_path)
            self._update_path_label(self.intro_image_path_label, file_path)

    def _select_outro_file(self):
        initial_dir = os.path.dirname(self.master_app.branding_outro_path_var.get()) if self.master_app.branding_outro_path_var.get() and os.path.exists(os.path.dirname(self.master_app.branding_outro_path_var.get())) else get_default_downloads_folder()
        file_path = filedialog.askopenfilename(title="Ch·ªçn Video Outro", initialdir=initial_dir, filetypes=(("Video files", "*.mp4 *.avi *.mkv *.mov *.webm"), ("All files", "*.*")), parent=self)
        if file_path:
            self.master_app.branding_outro_path_var.set(file_path)
            self._update_path_label(self.outro_path_label, file_path)
        self._update_dependent_controls_state()

    def _select_outro_image(self):
        file_path = filedialog.askopenfilename(title="Ch·ªçn ·∫¢nh cho Outro", filetypes=[("Image Files", "*.png *.jpg *.jpeg *.webp")], parent=self)
        if file_path:
            self.master_app.branding_outro_image_path_var.set(file_path)
            self._update_path_label(self.outro_image_path_label, file_path)

    def _select_logo_file(self):
        initial_dir = os.path.dirname(self.master_app.branding_logo_path_var.get()) if self.master_app.branding_logo_path_var.get() and os.path.exists(os.path.dirname(self.master_app.branding_logo_path_var.get())) else get_default_downloads_folder()
        file_path = filedialog.askopenfilename(title="Ch·ªçn File ·∫¢nh Logo (∆Øu ti√™n PNG)", initialdir=initial_dir, filetypes=(("Image files", "*.png *.jpg *.jpeg *.bmp *.webp"), ("All files", "*.*")), parent=self)
        if file_path:
            self.master_app.branding_logo_path_var.set(file_path)
            self._update_path_label(self.logo_path_label, file_path)
        self._update_dependent_controls_state()

    def _update_opacity_label(self, value):
        if hasattr(self, 'logo_opacity_value_label') and self.logo_opacity_value_label.winfo_exists():
            self.logo_opacity_value_label.configure(text=f"{int(value)}%")

# H√†m d√πng ƒë·ªÉ b·∫≠t t·∫Øt c√°c control ph·ª• thu·ªôc
    def _update_dependent_controls_state(self, source=None):
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i c√°c control ph·ª• thu·ªôc, x·ª≠ l√Ω logic lo·∫°i tr·ª´ l·∫´n nhau."""
        logging.debug(f"BrandingSettings: _update_dependent_controls_state ƒë∆∞·ª£c g·ªçi t·ª´ ngu·ªìn: {source}")

        ### KH·ªêI LOGIC M·ªöI: X·ª¨ L√ù LO·∫†I TR·ª™ L·∫™N NHAU ###
        # N·∫øu ng∆∞·ªùi d√πng v·ª´a tick v√†o checkbox "Intro t·ª´ ·∫£nh"
        if source == "intro_image" and self.master_app.branding_intro_from_image_enabled_var.get():
            self.master_app.branding_intro_enabled_var.set(False)
        # N·∫øu ng∆∞·ªùi d√πng v·ª´a tick v√†o checkbox "Intro t·ª´ video"
        elif source == "intro_video" and self.master_app.branding_intro_enabled_var.get():
            self.master_app.branding_intro_from_image_enabled_var.set(False)
        
        # T∆∞∆°ng t·ª± cho Outro
        if source == "outro_image" and self.master_app.branding_outro_from_image_enabled_var.get():
            self.master_app.branding_outro_enabled_var.set(False)
        elif source == "outro_video" and self.master_app.branding_outro_enabled_var.get():
            self.master_app.branding_outro_from_image_enabled_var.set(False)
        ### K·∫æT TH√öC KH·ªêI LOGIC M·ªöI ###

        # L·∫•y l·∫°i gi√° tr·ªã c√°c bi·∫øn sau khi ƒë√£ x·ª≠ l√Ω lo·∫°i tr·ª´ ƒë·ªÉ c·∫≠p nh·∫≠t UI
        is_intro_video_enabled = self.master_app.branding_intro_enabled_var.get()
        is_intro_image_enabled = self.master_app.branding_intro_from_image_enabled_var.get()
        is_outro_video_enabled = self.master_app.branding_outro_enabled_var.get()
        is_outro_image_enabled = self.master_app.branding_outro_from_image_enabled_var.get()
        is_logo_enabled = self.master_app.branding_logo_enabled_var.get()

        # --- Intro Video ---
        self.select_intro_button.configure(state="normal" if is_intro_video_enabled else "disabled")
        self._update_path_label(self.intro_path_label, self.master_app.branding_intro_path_var.get() if is_intro_video_enabled else "")
        if not is_intro_video_enabled: 
            self.master_app.branding_intro_path_var.set("")

        # --- Intro from Image ---
        self.select_intro_image_button.configure(state="normal" if is_intro_image_enabled else "disabled")
        self.intro_image_duration_entry.configure(state="normal" if is_intro_image_enabled else "disabled")
        self._update_path_label(self.intro_image_path_label, self.master_app.branding_intro_image_path_var.get() if is_intro_image_enabled else "")
        if not is_intro_image_enabled:
            self.master_app.branding_intro_image_path_var.set("")

        # --- Outro Video ---
        self.select_outro_button.configure(state="normal" if is_outro_video_enabled else "disabled")
        self._update_path_label(self.outro_path_label, self.master_app.branding_outro_path_var.get() if is_outro_video_enabled else "")
        if not is_outro_video_enabled: 
            self.master_app.branding_outro_path_var.set("")

        # --- Outro from Image ---
        self.select_outro_image_button.configure(state="normal" if is_outro_image_enabled else "disabled")
        self.outro_image_duration_entry.configure(state="normal" if is_outro_image_enabled else "disabled")
        self._update_path_label(self.outro_image_path_label, self.master_app.branding_outro_image_path_var.get() if is_outro_image_enabled else "")
        if not is_outro_image_enabled:
            self.master_app.branding_outro_image_path_var.set("")

        # --- Logo Controls ---
        if hasattr(self, 'select_logo_button'):
            self.select_logo_button.configure(state="normal" if is_logo_enabled else "disabled")
        if hasattr(self, 'logo_path_label'):
            self._update_path_label(self.logo_path_label, self.master_app.branding_logo_path_var.get() if is_logo_enabled else "")
        if not is_logo_enabled and hasattr(self.master_app, 'branding_logo_path_var'):
            self.master_app.branding_logo_path_var.set("")
            if hasattr(self, 'logo_path_label'): self._update_path_label(self.logo_path_label, "")

        # --- Hi·ªán/·∫©n frame c√†i ƒë·∫∑t chi ti·∫øt c·ªßa Logo ---
        logo_settings_widgets_refs = [
            getattr(self, 'logo_position_menu', None), 
            getattr(self, 'logo_opacity_slider', None), 
            getattr(self, 'logo_opacity_value_label', None), 
            getattr(self, 'logo_size_entry', None), 
            getattr(self, 'logo_margin_entry', None)
        ]
        
        logo_settings_frame_ref = getattr(self, 'logo_settings_frame', None)
        logo_main_frame_ref = getattr(self, 'logo_main_frame', None)

        if not all(widget and widget.winfo_exists() for widget in [logo_settings_frame_ref, logo_main_frame_ref, self.main_scroll_frame]):
            logging.error("BrandingSettings: M·ªôt trong c√°c frame ch√≠nh ƒë√£ b·ªã h·ªßy.")
            return

        if is_logo_enabled:
            for widget_item in logo_settings_widgets_refs:
                if widget_item and widget_item.winfo_exists(): 
                    widget_item.configure(state="normal")
            
            if not logo_settings_frame_ref.winfo_ismapped():
                logo_settings_frame_ref.pack(in_=self.main_scroll_frame, fill="x", pady=(0, 10), padx=(5, 5), after=logo_main_frame_ref)
        else:
            if logo_settings_frame_ref.winfo_ismapped():
                logo_settings_frame_ref.pack_forget()
            for widget_item in logo_settings_widgets_refs:
                if widget_item and widget_item.winfo_exists(): 
                    widget_item.configure(state="disabled")
        
        logging.debug(f"BrandingSettings: C·∫≠p nh·∫≠t UI ho√†n t·∫•t. is_logo_enabled: {is_logo_enabled}")

    # --- TH√äM C√ÅC H√ÄM N√ÄY V√ÄO TRONG L·ªöP BrandingSettingsWindow ---

    def _apply_branding_data(self, branding_data):
        """H√†m helper ƒë·ªÉ √°p d·ª•ng d·ªØ li·ªáu t·ª´ dictionary v√†o c√°c bi·∫øn UI branding."""
        try:
            # C·∫≠p nh·∫≠t c√°c bi·∫øn BooleanVar v√† StringVar
            self.master_app.branding_intro_enabled_var.set(branding_data.get("branding_intro_enabled", False))
            self.master_app.branding_intro_path_var.set(branding_data.get("branding_intro_path", ""))
            self.master_app.branding_outro_enabled_var.set(branding_data.get("branding_outro_enabled", False))
            self.master_app.branding_outro_path_var.set(branding_data.get("branding_outro_path", ""))
            self.master_app.branding_logo_enabled_var.set(branding_data.get("branding_logo_enabled", False))
            self.master_app.branding_logo_path_var.set(branding_data.get("branding_logo_path", ""))
            self.master_app.branding_logo_position_var.set(branding_data.get("branding_logo_position", "bottom_right"))
            
            # C·∫≠p nh·∫≠t c√°c bi·∫øn IntVar
            self.master_app.branding_logo_opacity_var.set(branding_data.get("branding_logo_opacity_percent", 80))
            self.master_app.branding_logo_size_percent_var.set(branding_data.get("branding_logo_size_percent", 10))
            self.master_app.branding_logo_margin_px_var.set(branding_data.get("branding_logo_margin_px", 10))

            # C·∫≠p nh·∫≠t c√°c bi·∫øn StringVar c·ª•c b·ªô cho c√°c Entry s·ªë ƒë·ªÉ UI hi·ªÉn th·ªã ƒë√∫ng
            self.logo_size_percent_str_var.set(str(self.master_app.branding_logo_size_percent_var.get()))
            self.logo_margin_px_str_var.set(str(self.master_app.branding_logo_margin_px_var.get()))

            # K√≠ch ho·∫°t c·∫≠p nh·∫≠t to√†n b·ªô UI ƒë·ªÉ ph·∫£n √°nh c√°c gi√° tr·ªã m·ªõi
            self._update_dependent_controls_state() # Ch·ªâ c·∫ßn g·ªçi h√†m n√†y l√† ƒë·ªß

            logging.info("ƒê√£ √°p d·ª•ng th√†nh c√¥ng d·ªØ li·ªáu branding v√†o giao di·ªán.")
            return True
        except Exception as e:
            logging.error(f"L·ªói khi √°p d·ª•ng d·ªØ li·ªáu branding: {e}", exc_info=True)
            return False

    def _import_branding_from_file(self):
        """M·ªü h·ªôp tho·∫°i ƒë·ªÉ ch·ªçn file .json v√† t·∫£i c·∫•u h√¨nh branding."""
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn File C·∫•u h√¨nh Branding (.json)",
            filetypes=[("JSON Branding Files", "*.json"), ("All files", "*.*")],
            parent=self
        )
        if not file_path:
            return

        try:
            with open(file_path, "r", encoding="utf-8") as f:
                branding_data = json.load(f)
            
            # Ki·ªÉm tra xem c√≥ ph·∫£i l√† file branding h·ª£p l·ªá kh√¥ng
            if "branding_logo_position" not in branding_data and "branding_intro_enabled" not in branding_data:
                messagebox.showerror("File kh√¥ng h·ª£p l·ªá", "File JSON ƒë√£ ch·ªçn kh√¥ng c√≥ v·∫ª l√† m·ªôt file c·∫•u h√¨nh branding h·ª£p l·ªá c·ªßa Piu.", parent=self)
                return

            if self._apply_branding_data(branding_data):
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ nh·∫≠p th√†nh c√¥ng c·∫•u h√¨nh branding t·ª´ file:\n{os.path.basename(file_path)}", parent=self)

        except Exception as e:
            messagebox.showerror("L·ªói Nh·∫≠p File", f"Kh√¥ng th·ªÉ ƒë·ªçc ho·∫∑c √°p d·ª•ng file c·∫•u h√¨nh branding.\nL·ªói: {e}", parent=self)

    def _export_branding_to_file(self):
        """Thu th·∫≠p c√†i ƒë·∫∑t branding hi·ªán t·∫°i v√† l∆∞u ch√∫ng v√†o m·ªôt file .json."""
        file_path = filedialog.asksaveasfilename(
            title="L∆∞u File C·∫•u h√¨nh Branding",
            defaultextension=".json",
            filetypes=[("JSON Branding Files", "*.json"), ("All files", "*.*")],
            initialfile="My-Piu-Branding.json",
            parent=self
        )
        if not file_path:
            return
            
        if not self._validate_and_save_settings():
            logging.warning("X√°c th·ª±c c√†i ƒë·∫∑t branding th·∫•t b·∫°i. H·ªßy xu·∫•t file.")
            return

        # Thu th·∫≠p t·∫•t c·∫£ c√°c gi√° tr·ªã hi·ªán t·∫°i
        current_branding_data = {
            "branding_intro_enabled": self.master_app.branding_intro_enabled_var.get(),
            "branding_intro_path": self.master_app.branding_intro_path_var.get(),
            "branding_outro_enabled": self.master_app.branding_outro_enabled_var.get(),
            "branding_outro_path": self.master_app.branding_outro_path_var.get(),
            "branding_logo_enabled": self.master_app.branding_logo_enabled_var.get(),
            "branding_logo_path": self.master_app.branding_logo_path_var.get(),
            "branding_logo_position": self.master_app.branding_logo_position_var.get(),
            "branding_logo_opacity_percent": self.master_app.branding_logo_opacity_var.get(),
            "branding_logo_size_percent": self.master_app.branding_logo_size_percent_var.get(),
            "branding_logo_margin_px": self.master_app.branding_logo_margin_px_var.get(),
        }

        try:
            with open(file_path, "w", encoding="utf-8") as f:
                json.dump(current_branding_data, f, ensure_ascii=False, indent=4)
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ xu·∫•t c·∫•u h√¨nh branding hi·ªán t·∫°i ra file:\n{os.path.basename(file_path)}", parent=self)
        except Exception as e:
            messagebox.showerror("L·ªói L∆∞u File", f"Kh√¥ng th·ªÉ l∆∞u file c·∫•u h√¨nh branding.\nL·ªói: {e}", parent=self)

