"""
API Settings Window for Piu Application.

A popup window for managing API keys (OpenAI, Google Cloud, Gemini).
"""

import os
import json
import logging
import threading
import customtkinter as ctk
from tkinter import filedialog, messagebox
from ui.widgets.menu_utils import textbox_right_click_menu


# Import optional libraries
try:
    from openai import OpenAI, RateLimitError, AuthenticationError, APIConnectionError, APIStatusError, APITimeoutError
    HAS_OPENAI_LIBS = True
except ImportError:
    HAS_OPENAI_LIBS = False

try:
    import google.generativeai as genai
    from google.api_core import exceptions as google_api_exceptions
    HAS_GEMINI_LIBS = True
except ImportError:
    HAS_GEMINI_LIBS = False

try:
    from google.cloud import translate_v2 as google_translate
    from google.oauth2 import service_account
    HAS_GOOGLE_CLOUD_TRANSLATE = True
except ImportError:
    HAS_GOOGLE_CLOUD_TRANSLATE = False
    service_account = None
    google_translate = None


class APISettingsWindow(ctk.CTkToplevel):

# H√†m kh·ªüi t·∫°o c·ª≠a s·ªï c√†i ƒë·∫∑t API Keys
    def __init__(self, master, openai_var, google_var, gemini_var): # S·ª≠a l·∫°i d√≤ng n√†y
        super().__init__(master)
        self.master_app = master 
        self.openai_key_var = openai_var
        self.google_key_path_var = google_var
        self.gemini_key_var = gemini_var 
        self.dub_batch_had_api_key_errors = False # C·ªù theo d√µi l·ªói API key

        self.title("üîë C√†i ƒë·∫∑t API Keys")
        self.geometry("550x450") 
        self.resizable(False, False)
        self.attributes("-topmost", True) 
        self.grab_set() 

        try: # CƒÉn gi·ªØa c·ª≠a s·ªï
            master.update_idletasks()
            self.update_idletasks()
            x = master.winfo_x() + (master.winfo_width() // 2) - (550 // 2)
            y = master.winfo_y() + (master.winfo_height() // 2) - (380 // 2) 
            self.geometry(f"+{x}+{y}")
        except Exception as e:
            logging.warning(f"Kh√¥ng th·ªÉ cƒÉn gi·ªØa c·ª≠a s·ªï c√†i ƒë·∫∑t API: {e}")

        # --- Frame ch√≠nh --- (Gi·ªØ nguy√™n)
        main_frame = ctk.CTkFrame(self, fg_color="transparent")
        main_frame.pack(expand=True, fill="both", padx=15, pady=15)

        # === KH·ªêI CODE M·ªöI CHO OPENAI V√Ä GOOGLE KEY - LAYOUT M·ªöI ===

        # --- Ph·∫ßn Google Cloud Key File ---
        google_frame = ctk.CTkFrame(main_frame) 
        google_frame.pack(fill="x", pady=(0, 10))

        # C·∫•u h√¨nh c·ªôt t∆∞∆°ng t·ª± OpenAI
        google_frame.grid_columnconfigure(0, weight=0, minsize=120) 
        google_frame.grid_columnconfigure(1, weight=1)             
        google_frame.grid_columnconfigure(2, weight=0, minsize=130)

        # --- H√†ng 0: Ch·ªâ c√≥ Label ch√≠nh ---
        ctk.CTkLabel(google_frame, text="Google Cloud Key File:", anchor="w").grid(row=0, column=0, padx=(10, 5), pady=(5,0), sticky="w")

        # --- H√†ng 1: Label ƒë∆∞·ªùng d·∫´n v√† N√∫t Ch·ªçn File ---
        self.google_path_label = ctk.CTkLabel(google_frame, textvariable=self.google_key_path_var, anchor="w", 
                                              text_color="gray", wraplength=350, 
                                              justify=ctk.LEFT, font=("Segoe UI", 10)) 
        # ƒê·∫∑t path label v√†o c·ªôt 0 v√† 1
        self.google_path_label.grid(row=1, column=0, columnspan=2, padx=(10, 5), pady=(2, 5), sticky="ew") 

        google_select_button = ctk.CTkButton(google_frame, text="Ch·ªçn File JSON...", width=120, command=self._select_google_key_file)
        # ƒê·∫∑t n√∫t ch·ªçn file v√†o c·ªôt 2, h√†ng 1
        google_select_button.grid(row=1, column=2, padx=(0, 10), pady=(2, 5), sticky="e") 

        # --- H√†ng 2: Nh√£n tr·∫°ng th√°i v√† N√∫t Ki·ªÉm tra ---
        self.google_status_label = ctk.CTkLabel(google_frame, text="", font=("Segoe UI", 10), text_color="gray", justify=ctk.LEFT) 
        # ƒê·∫∑t status v√†o c·ªôt 0, h√†ng 2, cƒÉn tr√°i
        self.google_status_label.grid(row=2, column=0, columnspan=2, padx=(10, 5), pady=(0, 10), sticky="w")

        self.google_test_button = ctk.CTkButton(google_frame, text="Ki·ªÉm tra File Key", width=120, command=self._test_google_key) 
        # ƒê·∫∑t n√∫t ki·ªÉm tra v√†o c·ªôt 2, h√†ng 2
        self.google_test_button.grid(row=2, column=2, padx=(0, 10), pady=(0, 10), sticky="e") 

        # C·∫≠p nh·∫≠t text ban ƒë·∫ßu cho label ƒë∆∞·ªùng d·∫´n Google
        initial_google_path = self.google_key_path_var.get()
        self.google_path_label.configure(text=initial_google_path if initial_google_path else "(Ch∆∞a ch·ªçn file)")
        if hasattr(self.google_key_path_var, 'trace_add'): 
             self.google_key_path_var.trace_add("write", self._update_google_label)

        # --- Ph·∫ßn Gemini API Key --- (Th√™m kh·ªëi code n√†y v√†o)
        gemini_frame = ctk.CTkFrame(main_frame)
        gemini_frame.pack(fill="x", pady=(10, 5)) # Th√™m pady tr√™n ƒë·ªÉ c√≥ kho·∫£ng c√°ch

        gemini_frame.grid_columnconfigure(1, weight=1)

        ctk.CTkLabel(gemini_frame, text="Gemini API Key:", anchor="w").grid(row=0, column=0, padx=(10, 5), pady=(5,0), sticky="w")

        self.gemini_entry = ctk.CTkEntry(gemini_frame, textvariable=self.gemini_key_var, show="*")
        self.gemini_entry.grid(row=1, column=0, columnspan=2, padx=(10, 5), pady=(2,5), sticky="ew")
        self.gemini_entry.bind("<Button-3>", textbox_right_click_menu)

        # N√∫t ki·ªÉm tra s·∫Ω ƒë∆∞·ª£c th√™m logic sau
        self.gemini_test_button = ctk.CTkButton(gemini_frame, text="Ki·ªÉm tra", width=120, command=self._test_gemini_key) 
        self.gemini_test_button.grid(row=1, column=2, padx=(0, 10), pady=(2,5), sticky="e")

        self.gemini_status_label = ctk.CTkLabel(gemini_frame, text="", font=("Segoe UI", 10), text_color="gray")
        self.gemini_status_label.grid(row=2, column=0, columnspan=3, padx=(10, 5), pady=(0, 10), sticky="w")

        # --- Ph·∫ßn OpenAI API Key ---
        openai_frame = ctk.CTkFrame(main_frame) 
        openai_frame.pack(fill="x", pady=(0, 15)) 

        # C·∫•u h√¨nh c·ªôt: C·ªôt 0 (Label ch√≠nh/Status), C·ªôt 1 (Entry - gi√£n), C·ªôt 2 (N√∫t Test)
        openai_frame.grid_columnconfigure(0, weight=0, minsize=120) 
        openai_frame.grid_columnconfigure(1, weight=1)             
        openai_frame.grid_columnconfigure(2, weight=0, minsize=130) 

        # --- H√†ng 0: Ch·ªâ c√≥ Label ch√≠nh ---
        ctk.CTkLabel(openai_frame, text="OpenAI API Key:", anchor="w").grid(row=0, column=0, padx=(10, 5), pady=(5,0), sticky="w")

        # --- H√†ng 1: √î nh·∫≠p Key v√† N√∫t Ki·ªÉm tra ---
        self.openai_entry = ctk.CTkEntry(openai_frame, textvariable=self.openai_key_var, show="*") 
        self.openai_entry.grid(row=1, column=0, columnspan=2, padx=(10, 5), pady=(2,5), sticky="ew") # Chi·∫øm c·ªôt 0 v√† 1
        self.openai_entry.bind("<Button-3>", textbox_right_click_menu)
        
        self.openai_test_button = ctk.CTkButton(openai_frame, text="Ki·ªÉm tra", width=120, command=self._test_openai_key) 
        self.openai_test_button.grid(row=1, column=2, padx=(0, 10), pady=(2,5), sticky="e") # ·ªû c·ªôt 2 c√πng h√†ng

        # --- H√†ng 2: Ch·ªâ c√≥ Nh√£n tr·∫°ng th√°i ---
        self.openai_status_label = ctk.CTkLabel(openai_frame, text="", font=("Segoe UI", 10), text_color="gray", justify=ctk.LEFT)
        # ƒê·∫∑t status v√†o c·ªôt 0, h√†ng 2, cƒÉn tr√°i
        self.openai_status_label.grid(row=2, column=0, columnspan=3, padx=(10, 5), pady=(0, 10), sticky="w") 

 
        # --- Khung N√∫t L∆∞u / H·ªßy --- 
        button_frame = ctk.CTkFrame(main_frame, fg_color="transparent")
        button_frame.pack(side="bottom", fill="x", pady=(15, 0)) 

        cancel_button = ctk.CTkButton(button_frame, text="H·ªßy", width=100, command=self.destroy)
        cancel_button.pack(side="right", padx=(10, 0))

        save_button = ctk.CTkButton(button_frame, text="L∆∞u C√†i ƒê·∫∑t", width=120, command=self._save_settings, fg_color="#1f6aa5")
        save_button.pack(side="right")


# X·ª≠ l√Ω s·ª± ki·ªán nh·∫•n n√∫t "Ki·ªÉm tra" cho OpenAI API Key.
    def _test_openai_key(self):
        """ B·∫Øt ƒë·∫ßu ki·ªÉm tra OpenAI API Key trong m·ªôt lu·ªìng ri√™ng. """
        current_key = self.openai_key_var.get().strip()
        if not current_key:
            self.openai_status_label.configure(text="Vui l√≤ng nh·∫≠p API Key.", text_color="orange")
            return

        # V√¥ hi·ªáu h√≥a n√∫t ki·ªÉm tra v√† hi·ªÉn th·ªã tr·∫°ng th√°i "ƒêang ki·ªÉm tra..."
        self.openai_test_button.configure(state=ctk.DISABLED, text="...")
        self.openai_status_label.configure(text="ƒêang ki·ªÉm tra OpenAI Key...", text_color="gray")
        self.update_idletasks() # C·∫≠p nh·∫≠t giao di·ªán ngay

        # Ch·∫°y ki·ªÉm tra trong thread
        thread = threading.Thread(target=self._perform_openai_key_check, args=(current_key,), daemon=True, name="OpenAIKeyCheckThread")
        thread.start()


# Th·ª±c hi·ªán ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa OpenAI API Key (ch·∫°y trong lu·ªìng).
    def _perform_openai_key_check(self, api_key_to_test):
        """ 
        Th·ª±c hi·ªán ki·ªÉm tra OpenAI API Key (ch·∫°y trong thread) - B·∫¢N N√ÇNG C·∫§P
        B·∫±ng c√°ch th·ª≠ m·ªôt y√™u c·∫ßu chat completion nh·ªè.
        """
        logging.info(f"[API Check] B·∫Øt ƒë·∫ßu ki·ªÉm tra OpenAI Key (b·∫£n n√¢ng c·∫•p): ...{api_key_to_test[-4:]}")
        status_message = "L·ªói kh√¥ng x√°c ƒë·ªãnh."
        status_color = "red"
        
        try:
            from openai import OpenAI, RateLimitError, AuthenticationError, APIConnectionError, APIStatusError, APITimeoutError
            HAS_OPENAI_LIBS_FOR_CHECK = True
        except ImportError:
            logging.error("[API Check] Thi·∫øu th∆∞ vi·ªán OpenAI ƒë·ªÉ ki·ªÉm tra key.")
            status_message = "L·ªói: Thi·∫øu th∆∞ vi·ªán OpenAI."
            status_color = "red"
            HAS_OPENAI_LIBS_FOR_CHECK = False

        if HAS_OPENAI_LIBS_FOR_CHECK:
            try:
                test_client = OpenAI(api_key=api_key_to_test, timeout=15.0) 
                
                # --- THAY ƒê·ªîI CH√çNH N·∫∞M ·ªû ƒê√ÇY ---
                # Thay v√¨ g·ªçi client.models.list(), ta th·ª≠ m·ªôt y√™u c·∫ßu chat nh·ªè
                # ƒë·ªÉ ƒë·∫£m b·∫£o key kh√¥ng ch·ªâ h·ª£p l·ªá m√† c√≤n c√≥ quy·ªÅn s·ª≠ d·ª•ng model.
                logging.debug("[API Check] ƒêang g·ªçi client.chat.completions.create() ƒë·ªÉ ki·ªÉm tra...")
                test_client.chat.completions.create(
                    model="gpt-3.5-turbo",  # D√πng model r·∫ª v√† nhanh ƒë·ªÉ test
                    messages=[{"role": "user", "content": "test"}],
                    max_tokens=1,          # Gi·ªõi h·∫°n output t·ªëi ƒëa ƒë·ªÉ ti·∫øt ki·ªám
                    temperature=0          # Kh√¥ng c·∫ßn s√°ng t·∫°o
                )
                # --- K·∫æT TH√öC THAY ƒê·ªîI ---

                logging.info(f"[API Check] Ki·ªÉm tra OpenAI Key th√†nh c√¥ng (ƒë√£ th·ª≠ Chat Completion).")
                status_message = "Key h·ª£p l·ªá! (K·∫øt n·ªëi th√†nh c√¥ng)"
                status_color = ("#0B8457", "lightgreen") # Xanh ƒë·∫≠m cho n·ªÅn s√°ng, xanh t∆∞∆°i cho n·ªÅn t·ªëi

            except AuthenticationError as e:
                logging.warning(f"[API Check] L·ªói x√°c th·ª±c OpenAI: {e}")
                status_message = "L·ªói: Key kh√¥ng ƒë√∫ng ho·∫∑c h·∫øt h·∫°n."
                status_color = "orange"
            except RateLimitError as e:
                logging.warning(f"[API Check] L·ªói gi·ªõi h·∫°n y√™u c·∫ßu OpenAI: {e}")
                status_message = "L·ªói: V∆∞·ª£t qu√° gi·ªõi h·∫°n request."
                status_color = "orange"
            except (APIConnectionError, APITimeoutError) as e:
                logging.error(f"[API Check] L·ªói k·∫øt n·ªëi/timeout OpenAI: {e}")
                status_message = "L·ªói: Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c OpenAI."
                status_color = "red"
            except APIStatusError as e: 
                logging.error(f"[API Check] L·ªói tr·∫°ng th√°i API OpenAI: {e.status_code} - {e.response}")
                # Ki·ªÉm tra l·ªói c·ª• th·ªÉ do kh√¥ng c√≥ quy·ªÅn truy c·∫≠p model
                if "does not exist or you do not have access to it" in str(e).lower():
                    status_message = f"L·ªói: Key ƒë√∫ng, nh∆∞ng kh√¥ng c√≥ quy·ªÅn truy c·∫≠p model."
                    status_color = "orange"
                else:
                    status_message = f"L·ªói API OpenAI: {e.status_code}"
                    status_color = "red"
            except Exception as e: 
                logging.error(f"[API Check] L·ªói kh√¥ng x√°c ƒë·ªãnh khi ki·ªÉm tra OpenAI Key: {e}", exc_info=True)
                status_message = "L·ªói kh√¥ng x√°c ƒë·ªãnh."
                status_color = "red"

        def _update_ui():
            try:
                if self and self.winfo_exists(): 
                    self.openai_status_label.configure(text=status_message, text_color=status_color)
                    self.openai_test_button.configure(state=ctk.NORMAL, text="Ki·ªÉm tra") 
            except Exception as e_ui:
                logging.error(f"L·ªói c·∫≠p nh·∫≠t UI sau khi ki·ªÉm tra OpenAI Key: {e_ui}")

        if hasattr(self, 'master_app') and self.master_app and hasattr(self.master_app, 'after'):
             self.master_app.after(0, _update_ui)
        elif hasattr(self, 'after'):
             self.after(0, _update_ui)


# H√ÄM M·ªöI: B·∫Øt ƒë·∫ßu ki·ªÉm tra Gemini Key trong lu·ªìng n·ªÅn
    def _test_gemini_key(self):
        """ B·∫Øt ƒë·∫ßu ki·ªÉm tra Gemini API Key trong m·ªôt lu·ªìng ri√™ng. """
        current_key = self.gemini_key_var.get().strip()
        if not current_key:
            self.gemini_status_label.configure(text="Vui l√≤ng nh·∫≠p API Key.", text_color="orange")
            return

        self.gemini_test_button.configure(state=ctk.DISABLED, text="...")
        self.gemini_status_label.configure(text="ƒêang ki·ªÉm tra Gemini Key...", text_color="gray")
        self.update_idletasks()

        thread = threading.Thread(target=self._perform_gemini_key_check, args=(current_key,), daemon=True, name="GeminiKeyCheckThread")
        thread.start()

# H√ÄM M·ªöI: Th·ª±c hi·ªán ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa Gemini API Key (ch·∫°y trong lu·ªìng)
    def _perform_gemini_key_check(self, api_key_to_test):
        """ 
        Th·ª±c hi·ªán ki·ªÉm tra Gemini API Key (ch·∫°y trong thread).
        PHI√äN B·∫¢N N√ÇNG C·∫§P: Th·ª≠ m·ªôt l·ªánh generate_content nh·ªè ƒë·ªÉ ki·ªÉm tra s√¢u h∆°n.
        """
        logging.info(f"[API Check] B·∫Øt ƒë·∫ßu ki·ªÉm tra Gemini Key (b·∫£n n√¢ng c·∫•p): ...{api_key_to_test[-4:]}")
        status_message = "L·ªói kh√¥ng x√°c ƒë·ªãnh."
        status_color = "red"

        try:
            import google.generativeai as genai
            from google.api_core import exceptions as google_api_exceptions

            genai.configure(api_key=api_key_to_test)

            logging.debug("[API Check] ƒêang th·ª≠ t·∫°o model v√† generate_content('test')...")
            
            # Kh·ªüi t·∫°o model
            model = genai.GenerativeModel('gemini-1.5-pro-latest')
            
            # Th·ª≠ g·ª≠i m·ªôt y√™u c·∫ßu generate_content c·ª±c nh·ªè v√† v√¥ h·∫°i.
            # ƒê√¢y l√† b√†i ki·ªÉm tra th·ª±c t·∫ø h∆°n nhi·ªÅu so v·ªõi list_models().
            model.generate_content(
                "test", 
                generation_config=genai.types.GenerationConfig(max_output_tokens=1, temperature=0.0)
            )

            # N·∫øu d√≤ng tr√™n kh√¥ng g√¢y l·ªói, key v√† m√¥i tr∆∞·ªùng ƒë·ªÅu ·ªïn.
            status_message = "Key h·ª£p l·ªá! (K·∫øt n·ªëi th√†nh c√¥ng)"
            status_color = ("#0B8457", "lightgreen") # Xanh ƒë·∫≠m cho n·ªÅn s√°ng, xanh t∆∞∆°i cho n·ªÅn t·ªëi
            logging.info(f"[API Check] Ki·ªÉm tra Gemini Key th√†nh c√¥ng (b·∫£n n√¢ng c·∫•p).")

        except google_api_exceptions.PermissionDenied as e:
            logging.warning(f"[API Check] L·ªói x√°c th·ª±c Gemini: {e}")
            status_message = "L·ªói: Key kh√¥ng ƒë√∫ng ho·∫∑c kh√¥ng c√≥ quy·ªÅn."
            status_color = "orange"
        except google_api_exceptions.GoogleAPICallError as e:
            # L·ªói n√†y c√≥ th·ªÉ do m·∫°ng ho·∫∑c c√°c v·∫•n ƒë·ªÅ k·∫øt n·ªëi kh√°c
            logging.error(f"[API Check] L·ªói g·ªçi API Google (c√≥ th·ªÉ do m·∫°ng): {e}")
            status_message = "L·ªói: Kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c t·ªõi Google."
            status_color = "red"
        except Exception as e:
            # B·∫Øt t·∫•t c·∫£ c√°c l·ªói kh√°c, bao g·ªìm c·∫£ "Illegal header value" n·∫øu n√≥ x·∫£y ra ·ªü ƒë√¢y
            logging.error(f"[API Check] L·ªói kh√¥ng x√°c ƒë·ªãnh khi ki·ªÉm tra Gemini Key: {e}", exc_info=True)
            # Ki·ªÉm tra xem c√≥ ph·∫£i l·ªói header kh√¥ng ƒë·ªÉ ƒë∆∞a ra th√¥ng b√°o c·ª• th·ªÉ
            if "illegal header value" in str(e).lower():
                status_message = "L·ªói: Key c√≥ v·∫ª ƒë√∫ng nh∆∞ng m√¥i tr∆∞·ªùng kh√¥ng h·ª£p l·ªá (l·ªói header)."
            else:
                status_message = f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {type(e).__name__}"
            status_color = "red"

        def _update_ui():
            if self and self.winfo_exists():
                self.gemini_status_label.configure(text=status_message, text_color=status_color)
                self.gemini_test_button.configure(state=ctk.NORMAL, text="Ki·ªÉm tra")

        if hasattr(self.master_app, 'after'):
             self.master_app.after(0, _update_ui)



# X·ª≠ l√Ω s·ª± ki·ªán nh·∫•n n√∫t "Ki·ªÉm tra File Key" cho Google Cloud.
    def _test_google_key(self):
        """ B·∫Øt ƒë·∫ßu ki·ªÉm tra file Google Cloud Key trong m·ªôt lu·ªìng ri√™ng. """
        current_path = self.google_key_path_var.get().strip()
        if not current_path:
            self.google_status_label.configure(text="Vui l√≤ng ch·ªçn file key JSON.", text_color="orange")
            return
        if not os.path.exists(current_path):
            self.google_status_label.configure(text="L·ªói: File key kh√¥ng t·ªìn t·∫°i.", text_color="red")
            return
        if not current_path.lower().endswith(".json"):
             self.google_status_label.configure(text="L·ªói: File ph·∫£i l√† ƒë·ªãnh d·∫°ng .json.", text_color="red")
             return

        # V√¥ hi·ªáu h√≥a n√∫t ki·ªÉm tra v√† hi·ªÉn th·ªã tr·∫°ng th√°i "ƒêang ki·ªÉm tra..."
        self.google_test_button.configure(state=ctk.DISABLED, text="...")
        self.google_status_label.configure(text="ƒêang ki·ªÉm tra Google Key File...", text_color="gray")
        self.update_idletasks() # C·∫≠p nh·∫≠t giao di·ªán ngay

        # Ch·∫°y ki·ªÉm tra trong thread
        thread = threading.Thread(target=self._perform_google_key_check, args=(current_path,), daemon=True, name="GoogleKeyCheckThread")
        thread.start()


# Th·ª±c hi·ªán ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa file JSON Key Google Cloud (ch·∫°y trong lu·ªìng).
    def _perform_google_key_check(self, key_file_path):
        """ Th·ª±c hi·ªán ki·ªÉm tra file Google Cloud Key (ch·∫°y trong thread). """
        logging.info(f"[API Check] B·∫Øt ƒë·∫ßu ki·ªÉm tra Google Key File: {key_file_path}")
        status_message = "L·ªói kh√¥ng x√°c ƒë·ªãnh."
        status_color = "red"
        
        if not HAS_GOOGLE_CLOUD_TRANSLATE or service_account is None or google_translate is None:
            logging.error("[API Check] Thi·∫øu th∆∞ vi·ªán Google Cloud ho·∫∑c Translate ƒë·ªÉ ki·ªÉm tra key.")
            status_message = "L·ªói: Thi·∫øu th∆∞ vi·ªán Google Cloud."
            status_color = "red"
        else:
            try:
                logging.debug(f"[API Check] ƒêang t·∫£i credentials t·ª´: {key_file_path}")
                credentials = service_account.Credentials.from_service_account_file(key_file_path)
                logging.debug(f"[API Check] T·∫£i credentials th√†nh c√¥ng. Project ID: {credentials.project_id}")

                logging.debug(f"[API Check] ƒêang kh·ªüi t·∫°o Google Translate Client...")
                test_client = google_translate.Client(credentials=credentials)
                
                try:
                    logging.debug(f"[API Check] ƒêang th·ª≠ d·ªãch 'test' sang 'en'...")
                    test_client.translate("test", target_language="en") 
                    logging.info(f"[API Check] Ki·ªÉm tra Google Key File th√†nh c√¥ng (ƒë√£ th·ª≠ d·ªãch).")
                    status_message = "File key h·ª£p l·ªá! (ƒê√£ th·ª≠ d·ªãch)"
                    # S·ª¨A ·ªû ƒê√ÇY: D√πng c·∫∑p m√†u thay v√¨ "lightgreen"
                    status_color = ("#0B8457", "lightgreen") # Xanh ƒë·∫≠m cho n·ªÅn s√°ng, xanh t∆∞∆°i cho n·ªÅn t·ªëi
                except HttpError as http_err: 
                     error_content = getattr(http_err, 'content', b'').decode('utf-8', 'replace')
                     logging.warning(f"[API Check] L·ªói HttpError khi th·ª≠ d·ªãch: {http_err.resp.status} - {error_content}")
                     status_message = f"L·ªói API Google ({http_err.resp.status}). C√≥ th·ªÉ API ch∆∞a b·∫≠t?"
                     status_color = "orange"
                     try:
                         error_json = json.loads(error_content)
                         error_detail = error_json.get('error', {}).get('message', '')
                         if error_detail: status_message += f"\nChi ti·∫øt: {error_detail[:100]}..."
                     except: pass
                except Exception as trans_err:
                    logging.warning(f"[API Check] L·ªói khi th·ª≠ d·ªãch v·ªõi Google Key: {trans_err}", exc_info=True)
                    status_message = "File key ƒë√∫ng, nh∆∞ng l·ªói khi th·ª≠ d·ªãch."
                    status_color = "orange"

            except FileNotFoundError:
                logging.error(f"[API Check] L·ªói kh√¥ng t√¨m th·∫•y file key: {key_file_path}")
                status_message = "L·ªói: File key kh√¥ng t·ªìn t·∫°i."
                status_color = "red"
            except ValueError as ve: 
                logging.error(f"[API Check] L·ªói ƒë·ªãnh d·∫°ng file Google Key JSON: {ve}")
                status_message = "L·ªói: ƒê·ªãnh d·∫°ng file key kh√¥ng h·ª£p l·ªá."
                status_color = "red"
            except Exception as e:
                logging.error(f"[API Check] L·ªói kh√¥ng x√°c ƒë·ªãnh khi ki·ªÉm tra Google Key: {e}", exc_info=True)
                status_message = "L·ªói kh√¥ng x√°c ƒë·ªãnh khi ki·ªÉm tra."
                status_color = "red"

        def _update_ui_google():
            try:
                if self and self.winfo_exists(): 
                    self.google_status_label.configure(text=status_message, text_color=status_color)
                    self.google_test_button.configure(state=ctk.NORMAL, text="Ki·ªÉm tra File Key") 
            except Exception as e_ui:
                logging.error(f"L·ªói c·∫≠p nh·∫≠t UI sau khi ki·ªÉm tra Google Key: {e_ui}")

        if hasattr(self, 'master_app') and self.master_app and hasattr(self.master_app, 'after'):
             self.master_app.after(0, _update_ui_google)
        elif hasattr(self, 'after'): 
             self.after(0, _update_ui_google)


# H√†m h√†nh ƒë·ªông (API Settings): Ch·ªçn file JSON key c·ªßa Google Cloud
    def _select_google_key_file(self):
        """ M·ªü dialog ch·ªçn file JSON key c·ªßa Google """
        initial_dir = os.path.dirname(self.google_key_path_var.get()) if self.google_key_path_var.get() else "/"
        filepath = filedialog.askopenfilename(
            title="Ch·ªçn file JSON Key c·ªßa Google Service Account",
            initialdir=initial_dir,
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")],
            parent=self # ƒê·∫£m b·∫£o dialog m·ªü tr√™n c·ª≠a s·ªï n√†y
        )
        if filepath and os.path.exists(filepath) and filepath.lower().endswith(".json"):
            self.google_key_path_var.set(filepath)
            logging.info(f"ƒê√£ ch·ªçn file Google Key: {filepath}")
        elif filepath:
            messagebox.showerror("File kh√¥ng h·ª£p l·ªá", "Vui l√≤ng ch·ªçn m·ªôt file .json h·ª£p l·ªá.", parent=self)


     # Callback c·∫≠p nh·∫≠t label hi·ªÉn th·ªã ƒë∆∞·ªùng d·∫´n file Google Key khi bi·∫øn thay ƒë·ªïi.
    def _update_google_label(self, *args):
        """ C·∫≠p nh·∫≠t label hi·ªÉn th·ªã ƒë∆∞·ªùng d·∫´n file Google Key """
        path = self.google_key_path_var.get()
        if self.google_path_label and self.google_path_label.winfo_exists():
             self.google_path_label.configure(text=path if path else "(Ch∆∞a ch·ªçn file)")


# L∆∞u c√°c c√†i ƒë·∫∑t API (b·∫±ng c√°ch g·ªçi h√†m l∆∞u c·ªßa app ch√≠nh) v√† ƒë√≥ng c·ª≠a s·ªï.
    def _save_settings(self):
        """L∆∞u c·∫•u h√¨nh API + l√†m t∆∞∆°i UI ngay, KH√îNG ghi ƒë√® gi√° tr·ªã ng∆∞·ªùi d√πng v·ª´a nh·∫≠p."""
        logging.info("L∆∞u c√†i ƒë·∫∑t API Keys...")
        try:
            if not (self.master_app and callable(getattr(self.master_app, 'save_current_config', None))):
                logging.error("Kh√¥ng th·ªÉ g·ªçi save_current_config t·ª´ c·ª≠a s·ªï c√†i ƒë·∫∑t.")
                return

            # 1) ƒê·∫®Y GI√Å TR·ªä T·ª™ POPUP -> MAIN APP (n·∫øu popup gi·ªØ StringVar ri√™ng)
            try:
                if hasattr(self, 'openai_key_var') and hasattr(self.master_app, 'openai_key_var'):
                    self.master_app.openai_key_var.set(self.openai_key_var.get().strip())
                if hasattr(self, 'gemini_key_var') and hasattr(self.master_app, 'gemini_key_var'):
                    self.master_app.gemini_key_var.set(self.gemini_key_var.get().strip())
                if hasattr(self, 'google_key_path_var') and hasattr(self.master_app, 'google_key_path_var'):
                    self.master_app.google_key_path_var.set(self.google_key_path_var.get().strip())
            except Exception as e_sync:
                logging.debug(f"Sync popup->main StringVar l·ªói (b·ªè qua): {e_sync}")

            # 2) L∆ØU CONFIG
            self.master_app.save_current_config()
            logging.info("ƒê√£ g·ªçi save_current_config t·ª´ c·ª≠a s·ªï ch√≠nh.")

            # 3) TH√îNG B√ÅO + (tu·ª≥ ch·ªçn) re-check license
            if hasattr(self.master_app, 'update_status'):
                self.master_app.after(10, lambda: self.master_app.update_status("‚úÖ C√°c c√†i ƒë·∫∑t API ƒë√£ ƒë∆∞·ª£c l∆∞u."))
            if hasattr(self.master_app, 'check_activation_status'):
                logging.info("APISettings: Y√™u c·∫ßu ki·ªÉm tra l·∫°i b·∫£n quy·ªÅn sau khi l∆∞u API keys.")
                self.master_app.after(3000, self.master_app.check_activation_status)

            # 4) REFRESH UI C√ÅC TAB NGAY (kh·ªèi c·∫ßn ƒë·ªïi tab)
            for fn_name in ("_set_dubbing_tab_ui_state",
                            "_update_dub_script_controls_state",
                            "_set_subtitle_tab_ui_state"):   # üëà th√™m d√≤ng n√†y cho tab Sub
                try:
                    fn = getattr(self.master_app, fn_name, None)
                    if callable(fn):
                        self.master_app.after(0, fn)
                except Exception as e_ref:
                    logging.debug(f"Refresh '{fn_name}' after save failed: {e_ref}")

        except Exception as e:
            logging.error(f"L·ªói khi g·ªçi save_current_config: {e}")
            return
        finally:
            # 5) ƒê√≥ng popup
            try:
                self.destroy()
            except Exception:
                pass

