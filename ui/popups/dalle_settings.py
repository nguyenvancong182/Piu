"""
DalleSettingsWindow class for Piu application.
Manages DALL-E image generation settings.
"""
import customtkinter as ctk
import logging
import os
from tkinter import filedialog, messagebox
import threading
import time

from utils.helpers import get_default_downloads_folder, safe_int
from ui.widgets.menu_utils import textbox_right_click_menu

class DalleSettingsWindow(ctk.CTkToplevel):

    def __init__(self, master_app):
        super().__init__(master_app)
        self.master_app = master_app

        self.title("üé® C√†i ƒë·∫∑t T·∫°o ·∫¢nh DALL-E")
        self.geometry("620x520") # K√≠ch th∆∞·ªõc mong mu·ªën
        self.resizable(False, False)
        self.attributes("-topmost", True)
        self.grab_set()

        try:
            master_app.update_idletasks()
            self.update_idletasks()
            popup_actual_width = 620
            popup_actual_height = 520

            x = master_app.winfo_x() + (master_app.winfo_width() // 2) - (popup_actual_width // 2)
            y = master_app.winfo_y() + (master_app.winfo_height() // 2) - (popup_actual_height // 2)
            
            screen_width = self.winfo_screenwidth()
            screen_height = self.winfo_screenheight()
            if x + popup_actual_width > screen_width: position_x = screen_width - popup_actual_width
            else: position_x = x
            if y + popup_actual_height > screen_height: position_y = screen_height - popup_actual_height
            else: position_y = y
            if position_x < 0: position_x = 0
            if position_y < 0: position_y = 0
                
            self.geometry(f"{popup_actual_width}x{popup_actual_height}+{position_x}+{position_y}")
        except Exception as e:
            logging.warning(f"Kh√¥ng th·ªÉ cƒÉn gi·ªØa c·ª≠a s·ªï DALL-E: {e}")

        # --- KHAI B√ÅO StringVars V√Ä ƒê·ªåC T·ª™ self.master_app.cfg ---
        self.dalle_model_var = ctk.StringVar(value=self.master_app.cfg.get("dalle_model_setting", "dall-e-3"))
        self.num_images_var = ctk.StringVar(value=str(self.master_app.cfg.get("dalle_num_images_setting", 1)))
        self.dalle_cost_saver_mode_var = ctk.BooleanVar(value=self.master_app.cfg.get("dalle_cost_saver_mode", False))
        self.image_size_var = ctk.StringVar(value=self.master_app.cfg.get(f"dalle_imagesize_{self.dalle_model_var.get()}_setting", ""))

        dalle_output_folder_candidate = self.master_app.cfg.get("dalle_output_folder_setting") # ∆Øu ti√™n config ƒë√£ l∆∞u
        if not dalle_output_folder_candidate or not os.path.isdir(dalle_output_folder_candidate):
            # N·∫øu kh√¥ng c√≥ trong config ho·∫∑c kh√¥ng h·ª£p l·ªá, th·ª≠ l·∫•y t·ª´ output_path c·ªßa tab Subtitle
            dalle_output_folder_candidate = self.master_app.output_path_var.get()
            if not dalle_output_folder_candidate or not os.path.isdir(dalle_output_folder_candidate):
                dalle_output_folder_candidate = get_default_downloads_folder() # Cu·ªëi c√πng l√† th∆∞ m·ª•c Downloads m·∫∑c ƒë·ªãnh

        self.output_folder_var = ctk.StringVar(value=dalle_output_folder_candidate)

        self.last_generation_params = None
        self.dalle3_quality_var = ctk.StringVar(value=self.master_app.cfg.get("dalle_quality_d3_setting", "standard"))
        self.dalle3_style_var = ctk.StringVar(value=self.master_app.cfg.get("dalle_style_d3_setting", "vivid"))

        # --- B·∫ÆT ƒê·∫¶U T·∫†O C√ÅC WIDGET UI ---
        self.main_frame = ctk.CTkFrame(self, fg_color="transparent")
        self.main_frame.pack(expand=True, fill="both", padx=15, pady=15)

        # --- KHUNG CH·ª®A C√ÅC T√ôY CH·ªåN ·ªû TR√äN C√ôNG (D√πng grid b√™n trong frame n√†y) ---
        top_options_frame = ctk.CTkFrame(self.main_frame, fg_color="transparent")
        top_options_frame.pack(fill="x", pady=(0, 10), anchor="n") # Pack frame n√†y v√†o main_frame

        # C·∫•u h√¨nh c·ªôt cho top_options_frame
        top_options_frame.grid_columnconfigure(0, weight=0, minsize=100)  # Label Model
        top_options_frame.grid_columnconfigure(1, weight=1)               # OptionMenu Model
        top_options_frame.grid_columnconfigure(2, weight=0, minsize=90)  # Label S·ªë l∆∞·ª£ng
        top_options_frame.grid_columnconfigure(3, weight=0, minsize=60)   # Entry S·ªë l∆∞·ª£ng
        top_options_frame.grid_columnconfigure(4, weight=0, minsize=100) # Label K√≠ch th∆∞·ªõc
        top_options_frame.grid_columnconfigure(5, weight=1)               # OptionMenu K√≠ch th∆∞·ªõc

        # H√†ng 0: Model, S·ªë l∆∞·ª£ng, K√≠ch th∆∞·ªõc
        model_label = ctk.CTkLabel(top_options_frame, text="Model DALL-E:")
        model_label.grid(row=0, column=0, padx=(0, 2), pady=5, sticky="w")
        dalle_models = ["dall-e-3", "dall-e-2"]
        self.dalle_model_optionmenu = ctk.CTkOptionMenu(
            top_options_frame, variable=self.dalle_model_var,
            values=dalle_models, command=self._on_dalle_model_changed
        )
        self.dalle_model_optionmenu.grid(row=0, column=1, padx=(0, 10), pady=5, sticky="ew")

        num_images_label = ctk.CTkLabel(top_options_frame, text="S·ªë l∆∞·ª£ng ·∫£nh:")
        num_images_label.grid(row=0, column=2, padx=(5, 2), pady=5, sticky="w")
        self.num_images_entry = ctk.CTkEntry(top_options_frame, textvariable=self.num_images_var, width=50) # Gi·∫£m width m·ªôt ch√∫t
        self.num_images_entry.grid(row=0, column=3, padx=(0, 10), pady=5, sticky="w") # sticky "w"

        image_size_label = ctk.CTkLabel(top_options_frame, text="K√≠ch th∆∞·ªõc ·∫£nh:")
        image_size_label.grid(row=0, column=4, padx=(5, 2), pady=5, sticky="w")
        self.image_size_optionmenu = ctk.CTkOptionMenu(top_options_frame, variable=self.image_size_var, values=[""])
        self.image_size_optionmenu.grid(row=0, column=5, padx=(0, 0), pady=5, sticky="ew")

        # H√†ng 1: Quality v√† Style cho DALL-E 3 (trong m·ªôt frame con ri√™ng, v·∫´n d√πng grid)
        self.dalle3_options_frame = ctk.CTkFrame(top_options_frame, fg_color="transparent")
        self.dalle3_options_frame.grid(row=1, column=0, columnspan=6, padx=0, pady=(0,5), sticky="ew") # K√©o d√†i 6 c·ªôt
        # C·∫•u h√¨nh c·ªôt cho dalle3_options_frame
        self.dalle3_options_frame.grid_columnconfigure(0, weight=0, minsize=150) # Label Quality
        self.dalle3_options_frame.grid_columnconfigure(1, weight=1)              # Menu Quality
        self.dalle3_options_frame.grid_columnconfigure(2, weight=0, minsize=140) # Label Style
        self.dalle3_options_frame.grid_columnconfigure(3, weight=1)              # Menu Style
        
        quality_label = ctk.CTkLabel(self.dalle3_options_frame, text="Ch·∫•t l∆∞·ª£ng (DALL-E 3):")
        quality_label.grid(row=0, column=0, padx=(0, 2), pady=5, sticky="w")
        quality_menu = ctk.CTkOptionMenu(
            self.dalle3_options_frame, variable=self.dalle3_quality_var, values=["standard", "hd"]
        )
        quality_menu.grid(row=0, column=1, padx=(0, 10), pady=5, sticky="ew")

        style_label = ctk.CTkLabel(self.dalle3_options_frame, text="Phong c√°ch (DALL-E 3):")
        style_label.grid(row=0, column=2, padx=(5, 2), pady=5, sticky="w")
        style_menu = ctk.CTkOptionMenu(
            self.dalle3_options_frame, variable=self.dalle3_style_var, values=["natural", "vivid"]
        )
        style_menu.grid(row=0, column=3, padx=(0, 0), pady=5, sticky="ew")

        # H√†ng 2: Checkbox "Ti·∫øt ki·ªám chi ph√≠" (trong m·ªôt frame con ri√™ng, v·∫´n d√πng grid)
        cost_saver_frame = ctk.CTkFrame(top_options_frame, fg_color="transparent")
        cost_saver_frame.grid(row=2, column=0, columnspan=6, padx=0, pady=(5, 5), sticky="w") # K√©o d√†i 6 c·ªôt, cƒÉn tr√°i

        self.cost_saver_checkbox = ctk.CTkCheckBox(
            cost_saver_frame,
            text="Ti·∫øt ki·ªám chi ph√≠ (T·∫°o 1 prompt DALL-E chung t·ª´ t√≥m t·∫Øt k·ªãch b·∫£n)",
            variable=self.dalle_cost_saver_mode_var
        )
        self.cost_saver_checkbox.pack(side="left", anchor="w") # D√πng pack trong frame con n√†y


        # --- √î nh·∫≠p Prompt ---
        prompt_label = ctk.CTkLabel(self.main_frame, text="M√¥ t·∫£ ·∫£nh (Prompt cho DALL-E):")
        prompt_label.pack(anchor="w", padx=5, pady=(10, 2)) # pady tr√™n ƒë·ªÉ t·∫°o kho·∫£ng c√°ch v·ªõi top_options_frame
        self.prompt_textbox = ctk.CTkTextbox(self.main_frame, height=160, wrap="word" , border_width=1, border_color="gray50") # Gi·∫£m height
        self.prompt_textbox.pack(fill="both", expand=True, padx=5, pady=(0, 10))
        self.prompt_textbox.insert("1.0", "M·ªôt kim t·ª± th√°p Ai C·∫≠p c·ªï ƒë·∫°i h√πng vƒ© d∆∞·ªõi √°nh ho√†ng h√¥n, phong c√°ch ƒëi·ªán ·∫£nh.")

        self.prompt_textbox.bind("<Button-3>", textbox_right_click_menu)

        # --- Ch·ªçn Th∆∞ m·ª•c l∆∞u ·∫£nh ---
        folder_label = ctk.CTkLabel(self.main_frame, text="L∆∞u ·∫£nh v√†o th∆∞ m·ª•c:")
        folder_label.pack(anchor="w", padx=5, pady=(5, 2))
        folder_path_frame = ctk.CTkFrame(self.main_frame, fg_color="transparent")
        folder_path_frame.pack(fill="x", pady=(0, 10))
        
        self.selected_folder_label = ctk.CTkLabel(folder_path_frame, textvariable=self.output_folder_var, wraplength=280, anchor="w", text_color="gray") # Gi·∫£m wraplength
        self.selected_folder_label.pack(side="left", padx=(5, 5), expand=True, fill="x")
        
        select_folder_button = ctk.CTkButton(folder_path_frame, text="Ch·ªçn th∆∞ m·ª•c...", width=110, command=self._select_output_folder) # Gi·∫£m width
        select_folder_button.pack(side="left", padx=(0, 3))
        
        open_folder_button = ctk.CTkButton(folder_path_frame, text="üìÇ M·ªü", width=70, command=self._open_output_folder) # R√∫t g·ªçn text v√† width
        open_folder_button.pack(side="left", padx=(0, 5))


        # --- C√ÅC N√öT CH√çNH (ƒê·∫¢M B·∫¢O ƒê∆Ø·ª¢C PACK CU·ªêI C√ôNG) ---
        buttons_main_frame = ctk.CTkFrame(self.main_frame, fg_color="transparent")
        buttons_main_frame.pack(side="bottom", fill="x", pady=(10, 0)) # pady tr√™n ƒë·ªÉ t√°ch bi·ªát

        # C√°c n√∫t n√†y pack v√†o buttons_main_frame t·ª´ ph·∫£i sang tr√°i
        self.cancel_button = ctk.CTkButton(buttons_main_frame, text="H·ªßy", width=100, command=self._on_close_dalle_window)
        self.cancel_button.pack(side="right", padx=(5, 0), pady=5) # padx=(left, right)

        self.generate_button = ctk.CTkButton(buttons_main_frame, text="üé® T·∫°o ·∫¢nh", width=130, command=self._initiate_dalle_generation, fg_color="#1f6aa5")
        self.generate_button.pack(side="right", padx=5, pady=5)

        self.redraw_button = ctk.CTkButton(
            buttons_main_frame, text="‚úèÔ∏è V·∫Ω l·∫°i", width=100,
            command=self._initiate_redraw, state="disabled"
        )
        self.redraw_button.pack(side="right", padx=(0, 5), pady=5)
        
        # --- C·∫≠p nh·∫≠t ban ƒë·∫ßu ---
        self.protocol("WM_DELETE_WINDOW", self._on_close_dalle_window)
        self.after(10, lambda: self._on_dalle_model_changed(self.dalle_model_var.get())) # G·ªçi ƒë·ªÉ c·∫≠p nh·∫≠t size list v√† hi·ªÉn th·ªã DALL-E 3 options
        self._update_google_label() # G·ªçi ƒë·ªÉ c·∫≠p nh·∫≠t label ƒë∆∞·ªùng d·∫´n google key ban ƒë·∫ßu
        #self.after(10, self._update_dependent_controls_state)
        

    # Th√™m h√†m _update_google_label n·∫øu n√≥ ch∆∞a c√≥ ho·∫∑c ƒë·ªÉ ƒë·∫£m b·∫£o n√≥ ƒë∆∞·ª£c g·ªçi ƒë√∫ng
    def _update_google_label(self, *args): # Th√™m *args ƒë·ªÉ c√≥ th·ªÉ d√πng v·ªõi trace
        """ C·∫≠p nh·∫≠t label hi·ªÉn th·ªã ƒë∆∞·ªùng d·∫´n file Google Key """
        # C·∫ßn ƒë·∫£m b·∫£o self.google_path_label ƒë√£ ƒë∆∞·ª£c t·∫°o n·∫øu h√†m n√†y ƒë∆∞·ª£c g·ªçi t·ª´ __init__ c·ªßa c·ª≠a s·ªï kh√°c
        if hasattr(self, 'google_key_path_var') and hasattr(self, 'google_path_label') and self.google_path_label.winfo_exists():
            path = self.google_key_path_var.get()
            self.google_path_label.configure(text=path if path else "(Ch∆∞a ch·ªçn file)")
        pass # B·ªè qua n·∫øu kh√¥ng ph·∫£i trong APISettingsWindow


# H√†m n√†y s·∫Ω ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "üé® T·∫°o ·∫¢nh"
    def _save_dalle_settings_to_config(self):
        """L∆∞u c√°c c√†i ƒë·∫∑t DALL-E hi·ªán t·∫°i t·ª´ UI v√†o self.master_app.cfg."""
        if not hasattr(self.master_app, 'cfg'):
            logging.error("[DALL-E Settings] master_app.cfg kh√¥ng t·ªìn t·∫°i. Kh√¥ng th·ªÉ l∆∞u c√†i ƒë·∫∑t DALL-E.")
            return False

        try:
            current_model = self.dalle_model_var.get()
            self.master_app.cfg["dalle_model_setting"] = current_model
            try:
                num_img_user_requested = int(self.num_images_var.get())
                app_max_total_images = 10 # B·∫°n c√≥ th·ªÉ thay ƒë·ªïi gi·ªõi h·∫°n n√†y
                self.master_app.cfg["dalle_num_images_setting"] = max(1, min(num_img_user_requested, app_max_total_images))
                logging.info(f"[DALL-E Settings] S·ªë l∆∞·ª£ng ·∫£nh ƒë∆∞·ª£c c·∫•u h√¨nh (sau khi gi·ªõi h·∫°n b·ªüi app): {self.master_app.cfg['dalle_num_images_setting']}")
            except ValueError:
                # N·∫øu gi√° tr·ªã kh√¥ng h·ª£p l·ªá, gi·ªØ l·∫°i gi√° tr·ªã c≈© trong cfg ho·∫∑c ƒë·∫∑t m·∫∑c ƒë·ªãnh l√† 1
                default_num_images = 1
                self.master_app.cfg["dalle_num_images_setting"] = self.master_app.cfg.get("dalle_num_images_setting", default_num_images)
                logging.warning(f"[DALL-E Settings] S·ªë l∆∞·ª£ng ·∫£nh nh·∫≠p v√†o kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng gi√° tr·ªã: {self.master_app.cfg['dalle_num_images_setting']}")

            # L∆∞u k√≠ch th∆∞·ªõc d·ª±a tr√™n model hi·ªán t·∫°i
            current_size = self.image_size_var.get()
            if current_size: # Ch·ªâ l∆∞u n·∫øu c√≥ gi√° tr·ªã
                 self.master_app.cfg[f"dalle_imagesize_{current_model}_setting"] = current_size


            if current_model == "dall-e-3":
                self.master_app.cfg["dalle_quality_d3_setting"] = self.dalle3_quality_var.get()
                self.master_app.cfg["dalle_style_d3_setting"] = self.dalle3_style_var.get()

            output_folder = self.output_folder_var.get()
            if output_folder and os.path.isdir(output_folder): # Ch·ªâ l∆∞u n·∫øu l√† th∆∞ m·ª•c h·ª£p l·ªá
                self.master_app.cfg["dalle_output_folder_setting"] = output_folder
            else:
                logging.warning(f"[DALL-E Settings] ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c output DALL-E kh√¥ng h·ª£p l·ªá '{output_folder}', kh√¥ng l∆∞u.")

            if hasattr(self, 'dalle_cost_saver_mode_var'): # Ki·ªÉm tra xem bi·∫øn ƒë√£ t·ªìn t·∫°i ch∆∞a
                self.master_app.cfg["dalle_cost_saver_mode"] = self.dalle_cost_saver_mode_var.get()
            else:
                # N·∫øu bi·∫øn ch∆∞a c√≥, c√≥ th·ªÉ b·∫°n mu·ªën ƒë·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh v√†o config
                self.master_app.cfg["dalle_cost_saver_mode"] = False 
                logging.warning("[DALL-E Settings] dalle_cost_saver_mode_var kh√¥ng t·ªìn t·∫°i khi l∆∞u, ƒë·∫∑t m·∫∑c ƒë·ªãnh l√† False.")

            # G·ªçi h√†m l∆∞u config t·ªïng c·ªßa ·ª©ng d·ª•ng ch√≠nh
            if hasattr(self.master_app, 'save_current_config') and callable(self.master_app.save_current_config):
                self.master_app.save_current_config()
                logging.info("[DALL-E Settings] ƒê√£ l∆∞u c√°c c√†i ƒë·∫∑t DALL-E v√†o config chung.")
                return True
            else:
                logging.error("[DALL-E Settings] Kh√¥ng t√¨m th·∫•y h√†m save_current_config tr√™n master_app.")
                return False
        except Exception as e:
            logging.error(f"[DALL-E Settings] L·ªói khi l∆∞u c√†i ƒë·∫∑t DALL-E: {e}", exc_info=True)
            return False


# H√†m n√†y g·ªçi h√†m _save_dalle_settings_to_config ƒë·ªÉ l∆∞u c√†i ƒë·∫∑t
    def _on_close_dalle_window(self):
        """ƒê∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng ƒë√≥ng c·ª≠a s·ªï DALL-E (v√≠ d·ª•, b·∫±ng n√∫t X).
        L∆∞u c√†i ƒë·∫∑t tr∆∞·ªõc khi ƒë√≥ng.
        """
        logging.info("[DALL-E Popup] C·ª≠a s·ªï DALL-E ƒëang ƒë√≥ng, th·ª±c hi·ªán l∆∞u c√†i ƒë·∫∑t...")
        self._save_dalle_settings_to_config() # G·ªçi h√†m l∆∞u b·∫°n ƒë√£ t·∫°o
        self.destroy() # Sau ƒë√≥ ƒë√≥ng c·ª≠a s·ªï
    

    def _on_dalle_model_changed(self, selected_model):
        logging.info(f"[DALL-E Popup] Model DALL-E thay ƒë·ªïi th√†nh: {selected_model}")
        supported_sizes = []
        default_size = ""
        if selected_model == "dall-e-3":
            supported_sizes = ["1024x1024", "1792x1024", "1024x1792"]
            default_size = "1792x1024"
        elif selected_model == "dall-e-2":
            supported_sizes = ["256x256", "512x512", "1024x1024"]
            default_size = "1024x1024"
        else:
            supported_sizes = ["1792x1024"] # M·∫∑c ƒë·ªãnh an to√†n
            default_size = "1792x1024"

        if hasattr(self, 'image_size_optionmenu'):
            self.image_size_optionmenu.configure(values=supported_sizes)
            current_size_var_value = self.image_size_var.get()
            if current_size_var_value in supported_sizes:
                self.image_size_var.set(current_size_var_value)
            elif supported_sizes:
                self.image_size_var.set(default_size if default_size in supported_sizes else supported_sizes[0])
            else:
                self.image_size_var.set("")
        else:
            logging.warning("Kh√¥ng t√¨m th·∫•y image_size_optionmenu ƒë·ªÉ c·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc.")

        # --- PH·∫¶N GRID ---
        if hasattr(self, 'dalle3_options_frame'): # Ki·ªÉm tra xem frame ƒë√£ t·ªìn t·∫°i ch∆∞a
            if selected_model == "dall-e-3":
                # Hi·ªÉn th·ªã frame b·∫±ng grid, ƒë·∫∑t n√≥ v√†o h√†ng 1, k√©o d√†i 6 c·ªôt
                self.dalle3_options_frame.grid(row=1, column=0, columnspan=6, padx=5, pady=(0,5), sticky="ew")
                logging.debug("ƒê√£ grid dalle3_options_frame (hi·ªÉn th·ªã).")
            else: # N·∫øu kh√¥ng ph·∫£i dall-e-3
                # ·∫®n frame b·∫±ng grid_remove
                self.dalle3_options_frame.grid_remove()
                logging.debug("ƒê√£ grid_remove dalle3_options_frame (·∫©n).")

    def _select_output_folder(self):
        folder_selected = filedialog.askdirectory(initialdir=self.output_folder_var.get(), parent=self)
        if folder_selected:
            self.output_folder_var.set(folder_selected)
            logging.info(f"[DALL-E Popup] ƒê√£ ch·ªçn th∆∞ m·ª•c l∆∞u ·∫£nh: {folder_selected}")


# H·∫£m n√∫t m·ªü ·∫£nh
    def _open_output_folder(self):
        folder_path = self.output_folder_var.get()
        if folder_path and os.path.isdir(folder_path):
            logging.info(f"[DALL-E Popup] Y√™u c·∫ßu m·ªü th∆∞ m·ª•c output: {folder_path}")
            try:
                # S·ª≠ d·ª•ng h√†m open_file_with_default_app t·ª´ master_app (SubtitleApp)
                if hasattr(self.master_app, 'open_file_with_default_app') and \
                   callable(self.master_app.open_file_with_default_app):
                    self.master_app.open_file_with_default_app(folder_path)
                else:
                    logging.warning("[DALL-E Popup] Kh√¥ng t√¨m th·∫•y open_file_with_default_app tr√™n master_app. Th·ª≠ os.startfile (Windows).")
                    if platform.system() == "Windows":
                        os.startfile(folder_path)
                    elif platform.system() == "Darwin": # macOS
                        subprocess.Popen(["open", folder_path])
                    else: # Linux
                        subprocess.Popen(["xdg-open", folder_path])
            except Exception as e:
                logging.error(f"[DALL-E Popup] L·ªói khi m·ªü th∆∞ m·ª•c '{folder_path}': {e}")
                messagebox.showerror("L·ªói M·ªü Th∆∞ M·ª•c", f"Kh√¥ng th·ªÉ m·ªü th∆∞ m·ª•c:\n{folder_path}\n\nL·ªói: {e}", parent=self)
        elif folder_path:
            messagebox.showwarning("ƒê∆∞·ªùng d·∫´n kh√¥ng h·ª£p l·ªá",
                                   f"ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c ƒë√£ ch·ªçn kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i:\n{folder_path}",
                                   parent=self)
        else:
            messagebox.showwarning("Ch∆∞a ch·ªçn th∆∞ m·ª•c",
                                   "Vui l√≤ng ch·ªçn m·ªôt th∆∞ m·ª•c h·ª£p l·ªá tr∆∞·ªõc.",
                                   parent=self)


    def _initiate_dalle_generation(self, is_redraw=False):
        prompt = self.prompt_textbox.get("1.0", "end-1c").strip()
        selected_dalle_model = self.dalle_model_var.get() # L·∫•y model ƒë√£ ch·ªçn
        try:
            num_images_str = self.num_images_var.get()
            if not num_images_str.isdigit(): # Ki·ªÉm tra c√≥ ph·∫£i l√† s·ªë kh√¥ng
                messagebox.showerror("S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá", "S·ªë l∆∞·ª£ng ·∫£nh ph·∫£i l√† m·ªôt s·ªë nguy√™n d∆∞∆°ng.", parent=self)
                return
            num_images = int(num_images_str)

            app_max_total_images = 16 
            if not (1 <= num_images <= app_max_total_images):
                messagebox.showerror("S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá", f"S·ªë l∆∞·ª£ng ·∫£nh cho ph√©p t·ª´ 1 ƒë·∫øn {app_max_total_images}.", parent=self)
                return
        except ValueError:
            messagebox.showerror("S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá", "Vui l√≤ng nh·∫≠p m·ªôt s·ªë nguy√™n d∆∞∆°ng cho s·ªë l∆∞·ª£ng ·∫£nh.", parent=self)
            return

        size = self.image_size_var.get()
        output_folder = self.output_folder_var.get()

        if not prompt:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p m√¥ t·∫£ ·∫£nh (Prompt).", parent=self)
            return
        if not output_folder or not os.path.isdir(output_folder):
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng ch·ªçn m·ªôt th∆∞ m·ª•c h·ª£p l·ªá ƒë·ªÉ l∆∞u ·∫£nh.", parent=self)
            return
        if not size: 
            messagebox.showwarning("Thi·∫øu k√≠ch th∆∞·ªõc", "Vui l√≤ng ch·ªçn k√≠ch th∆∞·ªõc ·∫£nh.", parent=self)
            return
        #self._save_dalle_settings_to_config() # C√¢n nh·∫Øc vi·ªác c√≥ n√™n l∆∞u t·ª± ƒë·ªông ·ªü ƒë√¢y kh√¥ng

        self.last_generation_params = {
            "prompt": prompt, "num_images": num_images, "size": size,
            "output_folder": output_folder, "dalle_model": selected_dalle_model
        }

        button_text_while_processing = "üé® ƒêang v·∫Ω l·∫°i..." if is_redraw else "üé® ƒêang t·∫°o..."
        
        if hasattr(self, 'generate_button') and self.generate_button.winfo_exists():
            self.generate_button.configure(state="disabled", text=button_text_while_processing)
        
        if hasattr(self, 'redraw_button') and self.redraw_button.winfo_exists():
            self.redraw_button.configure(state="disabled")
            
        if hasattr(self, 'cancel_button') and self.cancel_button.winfo_exists(): # N√∫t "H·ªßy" c·ªßa popup DALL-E
            self.cancel_button.configure(state="disabled")
            
        self.update_idletasks() 

        logging.info(f"[DALL-E Popup] Y√™u c·∫ßu {'V·∫Ω l·∫°i' if is_redraw else 'T·∫°o ·∫£nh'}: Model='{selected_dalle_model}', Prompt='{prompt[:30]}...', S·ªë l∆∞·ª£ng={num_images}, K√≠ch th∆∞·ªõc='{size}', Th∆∞ m·ª•c='{output_folder}'")

        thread = threading.Thread(
            target=self._perform_dalle_generation_thread,
            args=(self.master_app, prompt, num_images, size, output_folder, selected_dalle_model),
            daemon=True, name="DalleGenerationThread"
        )
        thread.start()

        logging.info("[DALL-E Popup] ƒê√£ b·∫Øt ƒë·∫ßu lu·ªìng t·∫°o ·∫£nh. ƒêang t·ª± ƒë·ªông ƒë√≥ng c·ª≠a s·ªï DALL-E...")
        self._on_close_dalle_window()


    def _initiate_redraw(self):
        if self.last_generation_params:
            logging.info(f"[DALL-E Popup] Y√™u c·∫ßu V·∫Ω l·∫°i v·ªõi params ƒë√£ l∆∞u: {self.last_generation_params}")
            self.prompt_textbox.delete("1.0", "end")
            self.prompt_textbox.insert("1.0", self.last_generation_params["prompt"])
            self.num_images_var.set(str(self.last_generation_params["num_images"]))
            self.dalle_model_var.set(self.last_generation_params["dalle_model"])
            # G·ªçi _on_dalle_model_changed ƒë·ªÉ c·∫≠p nh·∫≠t size list v√† sau ƒë√≥ set size
            self._on_dalle_model_changed(self.last_generation_params["dalle_model"])
            self.image_size_var.set(self.last_generation_params["size"])
            self.output_folder_var.set(self.last_generation_params["output_folder"])
            self._initiate_dalle_generation(is_redraw=True)
        else:
            messagebox.showinfo("Th√¥ng b√°o", "Ch∆∞a c√≥ th√¥ng tin ƒë·ªÉ 'V·∫Ω l·∫°i'.\nVui l√≤ng t·∫°o ·∫£nh √≠t nh·∫•t m·ªôt l·∫ßn.", parent=self)


    def _perform_dalle_generation_thread(self, master_app_ref, prompt, num_images_requested, size, output_folder, selected_dalle_model):

        active_main_dalle_button = None
        if hasattr(master_app_ref, 'current_view'):
            current_view_on_master = master_app_ref.current_view
            if current_view_on_master == "‚â° T·∫°o Ph·ª• ƒê·ªÅ":
                active_main_dalle_button = getattr(master_app_ref, 'dalle_button_sub_tab', None)
            elif current_view_on_master == "‚ô™ Thuy·∫øt Minh":
                active_main_dalle_button = getattr(master_app_ref, 'dalle_button_dub_tab', None)

            # Log ƒë·ªÉ ki·ªÉm tra
            logging.debug(f"[DALL-E Thread Start] Current master view: '{current_view_on_master}'. Active button target: {'Found' if active_main_dalle_button else 'Not Found'}")

        # C·∫≠p nh·∫≠t n√∫t tr√™n c·ª≠a s·ªï ch√≠nh (n·∫øu t√¨m th·∫•y)
        if active_main_dalle_button and active_main_dalle_button.winfo_exists():
            master_app_ref.after(0, lambda btn=active_main_dalle_button: btn.configure(text="üé® ƒêang v·∫Ω...", state=ctk.DISABLED))
            logging.info(f"[DALL-E Thread Start] ƒê√£ ƒë·∫∑t n√∫t DALL-E tr√™n app ch√≠nh ({active_main_dalle_button.winfo_name()}) sang tr·∫°ng th√°i x·ª≠ l√Ω.")
        else:
            # D·ª± ph√≤ng: N·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c n√∫t c·ª• th·ªÉ theo view, th·ª≠ c·∫≠p nh·∫≠t c·∫£ hai (n·∫øu ch√∫ng t·ªìn t·∫°i)
            # ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o c√≥ ph·∫£n h·ªìi ngay c·∫£ khi logic current_view c√≥ v·∫•n ƒë·ªÅ
            logging.warning(f"[DALL-E Thread Start] Kh√¥ng t√¨m th·∫•y n√∫t DALL-E c·ª• th·ªÉ theo view '{getattr(master_app_ref, 'current_view', 'N/A')}'. Th·ª≠ c·∫≠p nh·∫≠t c·∫£ hai n√∫t ch√≠nh.")
            if hasattr(master_app_ref, 'dalle_button_sub_tab') and master_app_ref.dalle_button_sub_tab.winfo_exists():
                master_app_ref.after(0, lambda: master_app_ref.dalle_button_sub_tab.configure(text="üé® ƒêang v·∫Ω...", state=ctk.DISABLED))
            if hasattr(master_app_ref, 'dalle_button_dub_tab') and master_app_ref.dalle_button_dub_tab.winfo_exists():
                master_app_ref.after(0, lambda: master_app_ref.dalle_button_dub_tab.configure(text="üé® ƒêang v·∫Ω...", state=ctk.DISABLED))

        if hasattr(master_app_ref, 'is_dalle_processing'):
            master_app_ref.is_dalle_processing = True
        if hasattr(master_app_ref, 'start_time'):
            master_app_ref.start_time = time.time() # ƒê·∫∑t start_time c·ªßa app ch√≠nh

        # G·ªçi h√†m c·∫≠p nh·∫≠t UI c·ªßa app ch√≠nh ƒë·ªÉ b·∫≠t n√∫t D·ª´ng
        if hasattr(master_app_ref, '_set_subtitle_tab_ui_state'):
            master_app_ref.after(0, lambda: master_app_ref._set_subtitle_tab_ui_state(subbing_active=False))
            
        if hasattr(master_app_ref, 'update_time_realtime') and callable(master_app_ref.update_time_realtime):
            master_app_ref.after(0, master_app_ref.update_time_realtime) # K√≠ch ho·∫°t v√≤ng l·∫∑p timer c·ªßa app ch√≠nh

        # H√†m _update_ui_from_thread (s·ª≠a l·∫°i m·ªôt ch√∫t ƒë·ªÉ ƒë∆°n gi·∫£n h√≥a vi·ªác truy·ªÅn parent)
        def _update_ui_from_thread(callback_func, *args_for_callback):
            parent_win_for_msgbox = self if self and self.winfo_exists() else master_app_ref
            def _task():
                try: # Th√™m try-except ·ªü ƒë√¢y ƒë·ªÉ b·∫Øt l·ªói n·∫øu parent_win_for_msgbox kh√¥ng h·ª£p l·ªá
                    if hasattr(messagebox, callback_func.__name__):
                        callback_func(*args_for_callback, parent=parent_win_for_msgbox)
                    else:
                        callback_func(*args_for_callback)
                except Exception as e_ui_task:
                    logging.error(f"L·ªói khi th·ª±c thi callback UI trong _task c·ªßa DALL-E: {e_ui_task}")

            if master_app_ref and hasattr(master_app_ref, 'after'):
                master_app_ref.after(0, _task)
            elif self and hasattr(self, 'after'): # Fallback
                 self.after(0, _task)

        try:
            api_key = master_app_ref.openai_key_var.get()
            if not api_key:
                logging.error("[DALL-E Thread] Thi·∫øu OpenAI API Key.")
                _update_ui_from_thread(messagebox.showerror, "L·ªói API Key", "OpenAI API Key ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh trong ·ª©ng d·ª•ng.")
                _update_ui_from_thread(self._reset_buttons_after_generation, False, "L·ªói: Thi·∫øu API Key")
                return

            from openai import OpenAI # Import an to√†n h∆°n ·ªü ƒë√¢y
            client = OpenAI(api_key=api_key, timeout=180.0)

            if hasattr(master_app_ref, 'update_status'):
                # C·∫≠p nh·∫≠t tr·∫°ng th√°i ban ƒë·∫ßu tr∆∞·ªõc khi v√†o v√≤ng l·∫∑p
                master_app_ref.after(0, lambda: master_app_ref.update_status(f"üé® PIU: Chu·∫©n b·ªã t·∫°o {num_images_requested} ·∫£nh..."))

            generated_image_urls = []
            image_data_list = []
            actual_api_calls_needed = 1
            images_per_api_call = 1

            if selected_dalle_model == "dall-e-2":
                images_per_api_call = min(num_images_requested, 10) # DALL-E 2 c√≥ th·ªÉ t·∫°o t·ªëi ƒëa 10 ·∫£nh/l·∫ßn
                actual_api_calls_needed = (num_images_requested + images_per_api_call - 1) // images_per_api_call # T√≠nh s·ªë l·∫ßn g·ªçi API c·∫ßn thi·∫øt
            elif selected_dalle_model == "dall-e-3":
                images_per_api_call = 1 # DALL-E 3 ch·ªâ t·∫°o 1 ·∫£nh/l·∫ßn
                actual_api_calls_needed = num_images_requested # S·ªë l·∫ßn g·ªçi API b·∫±ng s·ªë ·∫£nh y√™u c·∫ßu

            total_images_generated_so_far = 0 # Bi·∫øn ƒë·∫øm t·ªïng s·ªë ·∫£nh ƒë√£ ƒë∆∞·ª£c API tr·∫£ v·ªÅ

            for call_idx in range(actual_api_calls_needed):
                if master_app_ref.stop_event.is_set(): 
                    logging.info("[DALL-E Thread] Y√™u c·∫ßu d·ª´ng t·ª´ ·ª©ng d·ª•ng.")
                    _update_ui_from_thread(self._reset_buttons_after_generation, False, "ƒê√£ h·ªßy b·ªüi ng∆∞·ªùi d√πng.")
                    return

                images_this_call = images_per_api_call
                if selected_dalle_model == "dall-e-2" and call_idx == actual_api_calls_needed - 1: # L·∫ßn g·ªçi cu·ªëi cho DALL-E 2
                    remaining_images = num_images_requested - total_images_generated_so_far
                    if remaining_images > 0:
                        images_this_call = remaining_images

                start_image_num_this_call = total_images_generated_so_far + 1
                end_image_num_this_call = total_images_generated_so_far + images_this_call

                status_msg_api_call = f"üé® DALL-E: G·ªçi API t·∫°o ·∫£nh {start_image_num_this_call}-{end_image_num_this_call}/{num_images_requested}..."
                if images_this_call == 1 and num_images_requested > 1 : # DALL-E 3 t·∫°o t·ª´ng ·∫£nh
                    status_msg_api_call = f"üé® DALL-E: G·ªçi API t·∫°o ·∫£nh {start_image_num_this_call}/{num_images_requested}..."
                elif images_this_call == 1 and num_images_requested == 1:
                    status_msg_api_call = f"üé® DALL-E: G·ªçi API t·∫°o ·∫£nh..."


                if hasattr(master_app_ref, 'update_status'):
                    master_app_ref.after(0, lambda msg=status_msg_api_call: master_app_ref.update_status(msg))

                logging.info(f"[DALL-E Thread] G·ªçi API DALL-E (l·∫ßn {call_idx+1}/{actual_api_calls_needed}), Model: {selected_dalle_model}, n={images_this_call}")
                try:

                    if selected_dalle_model == "dall-e-3":
                        quality_val = self.dalle3_quality_var.get()
                        style_val = self.dalle3_style_var.get()
                        response = client.images.generate(
                            model=selected_dalle_model, prompt=prompt,
                            n=images_this_call, size=size,
                            quality=quality_val, style=style_val,
                            response_format="url"
                        )
                    else: # dall-e-2
                        response = client.images.generate(
                            model=selected_dalle_model, prompt=prompt,
                            n=images_this_call, size=size,
                            response_format="url"
                        )

                    if response.data:
                        for item in response.data:
                            if item.url: generated_image_urls.append(item.url)
                            elif item.b64_json: image_data_list.append(item.b64_json)
                        total_images_generated_so_far += len(response.data) # C·∫≠p nh·∫≠t t·ªïng s·ªë ·∫£nh ƒë√£ c√≥ k·∫øt qu·∫£
                except Exception as api_err:
                    # x·ª≠ l√Ω l·ªói ...
                    logging.error(f"[DALL-E Thread] L·ªói khi g·ªçi API DALL-E l·∫ßn {call_idx+1}: {api_err}", exc_info=True)
                    _update_ui_from_thread(messagebox.showerror, "L·ªói API DALL-E", f"Kh√¥ng th·ªÉ t·∫°o ·∫£nh (l·∫ßn {call_idx+1}):\n{api_err}")
                    _update_ui_from_thread(self._reset_buttons_after_generation, False, f"L·ªói API DALL-E: {str(api_err)[:100]}")
                    return
            # --- K·∫æT TH√öC V√íNG L·∫∂P G·ªåI API ---

            # ƒê·∫øm t·ªïng s·ªë ·∫£nh ƒë√£ ƒë∆∞·ª£c API tr·∫£ v·ªÅ th√†nh c√¥ng
            total_images_generated = len(generated_image_urls) + len(image_data_list)
            if total_images_generated > 0:
                # G·ªçi h√†m theo d√µi, t√≠nh m·ªói ·∫£nh l√† 1 "call" cho OpenAI
                self._track_api_call(service_name="openai_calls", units=total_images_generated)

            if not generated_image_urls and not image_data_list:
                logging.warning("[DALL-E Thread] Kh√¥ng c√≥ URL/d·ªØ li·ªáu ·∫£nh n√†o ƒë∆∞·ª£c t·∫°o.")
                _update_ui_from_thread(messagebox.showwarning, "Kh√¥ng c√≥ ·∫£nh", "DALL-E kh√¥ng tr·∫£ v·ªÅ ·∫£nh n√†o.")
                _update_ui_from_thread(self._reset_buttons_after_generation, False, "Kh√¥ng c√≥ ·∫£nh ƒë∆∞·ª£c t·∫°o")
                return

            # C·∫≠p nh·∫≠t tr·∫°ng th√°i tr∆∞·ªõc khi t·∫£i
            total_images_to_download = len(generated_image_urls) + len(image_data_list)
            if hasattr(master_app_ref, 'update_status'):
                 master_app_ref.after(0, lambda: master_app_ref.update_status(f"üé® PIU: Chu·∫©n b·ªã t·∫£i {total_images_to_download} ·∫£nh..."))


            saved_file_paths = []
            current_timestamp = int(time.time())

            # T·∫£i ·∫£nh t·ª´ URL
            for i, img_url in enumerate(generated_image_urls):
                if master_app_ref.stop_event.is_set(): # Ki·ªÉm tra d·ª´ng tr∆∞·ªõc m·ªói l·∫ßn t·∫£i
                    # ... (x·ª≠ l√Ω d·ª´ng)
                    logging.info("[DALL-E Thread] Y√™u c·∫ßu d·ª´ng t·ª´ ·ª©ng d·ª•ng khi ƒëang t·∫£i ·∫£nh.")
                    _update_ui_from_thread(self._reset_buttons_after_generation, False, "ƒê√£ h·ªßy b·ªüi ng∆∞·ªùi d√πng.")
                    return

                # C·∫≠p nh·∫≠t tr·∫°ng th√°i t·∫£i t·ª´ng ·∫£nh
                if hasattr(master_app_ref, 'update_status'):
                    status_msg_download = f"üé® PIU: ƒêang t·∫£i ·∫£nh {i+1}/{total_images_to_download}..."
                    master_app_ref.after(0, lambda msg=status_msg_download: master_app_ref.update_status(msg))
                try:
                    img_response = requests.get(img_url, timeout=60)
                    img_response.raise_for_status()
                    safe_prompt_part = "".join(filter(str.isalnum, prompt))[:20]
                    file_name = f"dalle_{safe_prompt_part}_{current_timestamp}_{i}.png"
                    file_path = os.path.join(output_folder, file_name)
                    with open(file_path, "wb") as f: f.write(img_response.content)
                    saved_file_paths.append(file_path)
                    logging.info(f"[DALL-E Thread] ƒê√£ l∆∞u ·∫£nh t·ª´ URL: {file_path}")
                except Exception as download_err:
                    logging.error(f"[DALL-E Thread] L·ªói t·∫£i ·∫£nh t·ª´ URL {img_url}: {download_err}")

            # X·ª≠ l√Ω ·∫£nh t·ª´ base64
            for i, b64_data in enumerate(image_data_list):
                if master_app_ref.stop_event.is_set(): # Ki·ªÉm tra d·ª´ng
                    logging.info("[DALL-E Thread] Y√™u c·∫ßu d·ª´ng t·ª´ ·ª©ng d·ª•ng khi ƒëang x·ª≠ l√Ω ·∫£nh base64.")
                    _update_ui_from_thread(self._reset_buttons_after_generation, False, "ƒê√£ h·ªßy b·ªüi ng∆∞·ªùi d√πng.")
                    return
                # C·∫≠p nh·∫≠t tr·∫°ng th√°i x·ª≠ l√Ω t·ª´ng ·∫£nh base64
                if hasattr(master_app_ref, 'update_status'):
                    status_msg_b64 = f"üé® PIU: ƒêang x·ª≠ l√Ω ·∫£nh base64 {i+1+len(generated_image_urls)}/{total_images_to_download}..."
                    master_app_ref.after(0, lambda msg=status_msg_b64: master_app_ref.update_status(msg))
                try:
                    img_bytes = base64.b64decode(b64_data)
                    safe_prompt_part = "".join(filter(str.isalnum, prompt))[:20]
                    file_name = f"dalle_{safe_prompt_part}_{current_timestamp}_b64_{i}.png" # Th√™m _b64 ƒë·ªÉ ph√¢n bi·ªát
                    file_path = os.path.join(output_folder, file_name)
                    with open(file_path, "wb") as f: f.write(img_bytes)
                    saved_file_paths.append(file_path)
                    logging.info(f"[DALL-E Thread] ƒê√£ l∆∞u ·∫£nh t·ª´ base64: {file_path}")
                except Exception as b64_err:
                    logging.error(f"[DALL-E Thread] L·ªói x·ª≠ l√Ω ·∫£nh base64: {b64_err}")

            if saved_file_paths:
                msg = f"ƒê√£ t·∫°o v√† l∆∞u th√†nh c√¥ng {len(saved_file_paths)} ·∫£nh v√†o th∆∞ m·ª•c:\n{output_folder}"
                logging.info(f"[DALL-E Thread] {msg}")
                _update_ui_from_thread(messagebox.showinfo, "Ho√†n th√†nh", msg)
                _update_ui_from_thread(self._reset_buttons_after_generation, True, f"ƒê√£ t·∫°o {len(saved_file_paths)} ·∫£nh.")
            else:
                _update_ui_from_thread(messagebox.showwarning, "L·ªói l∆∞u ·∫£nh", "Kh√¥ng th·ªÉ l∆∞u b·∫•t k·ª≥ ·∫£nh n√†o ƒë√£ t·∫°o.")
                _update_ui_from_thread(self._reset_buttons_after_generation, False, "L·ªói l∆∞u ·∫£nh")

        except ImportError:
            logging.error("[DALL-E Thread] L·ªói: Thi·∫øu th∆∞ vi·ªán OpenAI (trong thread).")
            _update_ui_from_thread(messagebox.showerror, "L·ªói Th∆∞ Vi·ªán", "Th∆∞ vi·ªán OpenAI c·∫ßn thi·∫øt ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t.")
            _update_ui_from_thread(self._reset_buttons_after_generation, False, "L·ªói: Thi·∫øu th∆∞ vi·ªán OpenAI")
        except Exception as e:
            logging.error(f"[DALL-E Thread] L·ªói kh√¥ng mong mu·ªën trong qu√° tr√¨nh t·∫°o ·∫£nh DALL-E: {e}", exc_info=True)
            _update_ui_from_thread(messagebox.showerror, "L·ªói Kh√¥ng Mong Mu·ªën", f"ƒê√£ x·∫£y ra l·ªói:\n{e}")
            _update_ui_from_thread(self._reset_buttons_after_generation, False, f"L·ªói: {str(e)[:100]}")

# B√™n trong l·ªõp DalleSettingsWindow
    def _reset_buttons_after_generation(self, success, status_message="Ho√†n t·∫•t"):
        # --- KH√îI PH·ª§C N√öT TR√äN APP CH√çNH ---
        active_main_dalle_button_reset = None
        # S·ª≠ d·ª•ng self.master_app (ch√≠nh l√† master_app_ref ƒë√£ truy·ªÅn v√†o thread)
        if hasattr(self.master_app, 'current_view'):
            current_view_on_master_at_reset = self.master_app.current_view
            if current_view_on_master_at_reset == "‚â° T·∫°o Ph·ª• ƒê·ªÅ":
                active_main_dalle_button_reset = getattr(self.master_app, 'dalle_button_sub_tab', None)
            elif current_view_on_master_at_reset == "‚ô™ Thuy·∫øt Minh":
                active_main_dalle_button_reset = getattr(self.master_app, 'dalle_button_dub_tab', None)

            logging.debug(f"[DALL-E Reset] Current master view: '{current_view_on_master_at_reset}'. Button to reset: {'Found' if active_main_dalle_button_reset else 'Not Found'}")

        if active_main_dalle_button_reset and active_main_dalle_button_reset.winfo_exists():
            self.master_app.after(0, lambda btn=active_main_dalle_button_reset: btn.configure(text="üé® T·∫°o ·∫¢nh AI", state=ctk.NORMAL))
            logging.info(f"[DALL-E Reset] ƒê√£ kh√¥i ph·ª•c n√∫t DALL-E tr√™n app ch√≠nh ({active_main_dalle_button_reset.winfo_name()}) v·ªÅ tr·∫°ng th√°i ch·ªù.")
        else:
            # D·ª± ph√≤ng: N·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c n√∫t c·ª• th·ªÉ, th·ª≠ kh√¥i ph·ª•c c·∫£ hai
            logging.warning(f"[DALL-E Reset] Kh√¥ng t√¨m th·∫•y n√∫t DALL-E c·ª• th·ªÉ theo view '{getattr(self.master_app, 'current_view', 'N/A')}'. Th·ª≠ kh√¥i ph·ª•c c·∫£ hai n√∫t ch√≠nh.")
            if hasattr(self.master_app, 'dalle_button_sub_tab') and self.master_app.dalle_button_sub_tab.winfo_exists():
                self.master_app.after(0, lambda: self.master_app.dalle_button_sub_tab.configure(text="üé® T·∫°o ·∫¢nh AI", state=ctk.NORMAL))
            if hasattr(self.master_app, 'dalle_button_dub_tab') and self.master_app.dalle_button_dub_tab.winfo_exists():
                self.master_app.after(0, lambda: self.master_app.dalle_button_dub_tab.configure(text="üé® T·∫°o ·∫¢nh AI", state=ctk.NORMAL))

        if hasattr(self, 'generate_button') and self.generate_button.winfo_exists():
            self.generate_button.configure(state="normal", text="üé® T·∫°o ·∫¢nh")
        if hasattr(self, 'redraw_button') and self.redraw_button.winfo_exists():
            self.redraw_button.configure(state="normal" if self.last_generation_params else "disabled")
        if hasattr(self, 'cancel_button') and self.cancel_button.winfo_exists():
            # Quy·∫øt ƒë·ªãnh state cho n√∫t cancel ·ªü ƒë√¢y, c√≥ th·ªÉ l√† "normal"
            self.cancel_button.configure(state="normal")

        final_status_app = f"‚úÖ PIU: {status_message}" if success else f"‚ùå PIU: {status_message}"
        if hasattr(self.master_app, 'update_status'):
            self.master_app.update_status(final_status_app)

        if hasattr(self.master_app, 'is_dalle_processing'):
            self.master_app.is_dalle_processing = False
            logging.debug("[DALL-E Popup] ƒê√£ ƒë·∫∑t master_app.is_dalle_processing = False")

        # --- B·∫¨T √ÇM THANH HI·ªÜN ---
        if success: # Ch·ªâ ph√°t √¢m thanh khi th√†nh c√¥ng (ho·∫∑c b·∫°n c√≥ th·ªÉ thay ƒë·ªïi ƒëi·ªÅu ki·ªán)
            try:
                play_sound_on_task_complete = False
                sound_file_to_play = ""

                if hasattr(self.master_app, 'download_sound_var'):
                    play_sound_on_task_complete = self.master_app.download_sound_var.get()
                if hasattr(self.master_app, 'download_sound_path_var'):
                    sound_file_to_play = self.master_app.download_sound_path_var.get()
                if play_sound_on_task_complete and \
                   sound_file_to_play and \
                   os.path.isfile(sound_file_to_play) and \
                   'PLAYSOUND_AVAILABLE' in globals() and PLAYSOUND_AVAILABLE and \
                   'play_sound_async' in globals() and callable(play_sound_async):

                    logging.info(f"[DALL-E Popup] T·∫°o ·∫£nh DALL-E xong, s·∫Ω ph√°t √¢m thanh: {sound_file_to_play}")
                    play_sound_async(sound_file_to_play)
                elif play_sound_on_task_complete:
                    logging.warning(f"[DALL-E Popup] ƒê√£ b·∫≠t √¢m thanh ho√†n th√†nh nh∆∞ng ƒë∆∞·ªùng d·∫´n file '{sound_file_to_play}' kh√¥ng h·ª£p l·ªá, file kh√¥ng t·ªìn t·∫°i, ho·∫∑c th∆∞ vi·ªán/h√†m 'playsound' kh√¥ng kh·∫£ d·ª•ng.")

            except Exception as sound_err:
                logging.warning(f"[DALL-E Popup] Kh√¥ng th·ªÉ ph√°t √¢m thanh b√°o ho√†n t·∫•t DALL-E: {sound_err}")

        # T√πy ch·ªçn ƒë√≥ng popup n·∫øu th√†nh c√¥ng
        #if success and self.winfo_exists(): # Th√™m ki·ªÉm tra self.winfo_exists()
        #     try:
        #         self.destroy()
        #     except Exception as e_destroy:
        #         logging.error(f"L·ªói khi t·ª± ƒë·ªông ƒë√≥ng c·ª≠a s·ªï DALL-E: {e_destroy}")



# =====================================================================================================================================
# L·ªöP WIDGET TOOLTIP (CH√ö TH√çCH KHI DI CHU·ªòT) - PHI√äN B·∫¢N S·ª¨A L·ªñI CƒÇN GI·ªÆA & M√ÄU S·∫ÆC
# =====================================================================================================================================
# ----- L·ªöP TOOLTIP ƒê√É ƒê∆Ø·ª¢C T√ÅCH RA ui/widgets/tooltip.py -----

# =====================================================================================================================================
# L·ªöP C·ª¨A S·ªî QU·∫¢N L√ù METADATA YOUTUBE
# =====================================================================================================================================

