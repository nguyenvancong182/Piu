"""
SubtitleStyleSettingsWindow class for Piu application.
Manages subtitle style settings (font, colors, outline, etc.)
Extracted from Piu.py
"""

import customtkinter as ctk
import logging
import os
import json
from tkinter import filedialog, messagebox, colorchooser
import matplotlib.font_manager as font_manager

from ui.widgets.tooltip import Tooltip
from ui.widgets.custom_font_dropdown import CustomFontDropdown


class SubtitleStyleSettingsWindow(ctk.CTkToplevel):
# Kh·ªüi t·∫°o giao di·ªán
    def __init__(self, master_app):
        super().__init__(master_app)
        self.master_app = master_app

        self.title("üé® C√†i ƒë·∫∑t Ki·ªÉu Ph·ª• ƒë·ªÅ (Hardsub)")
        # THAY ƒê·ªîI K√çCH TH∆Ø·ªöC ·ªû ƒê√ÇY
        desired_popup_width = 620
        desired_popup_height = 750
        self.geometry(f"{desired_popup_width}x{desired_popup_height}")
        
        self.resizable(False, False)
        self.attributes("-topmost", True)
        self.grab_set()

        # CƒÉn gi·ªØa c·ª≠a s·ªï
        try:
            master_app.update_idletasks()
            self.update_idletasks()
            
            master_x = master_app.winfo_x()
            master_y = master_app.winfo_y()
            master_width = master_app.winfo_width()
            master_height = master_app.winfo_height()
            
            popup_width_actual = self.winfo_width()
            popup_height_actual = self.winfo_height()

            final_popup_width = desired_popup_width if popup_width_actual <= 1 else popup_width_actual
            final_popup_height = desired_popup_height if popup_height_actual <= 1 else popup_height_actual
            
            position_x = master_x + (master_width // 2) - (final_popup_width // 2)
            position_y = master_y + (master_height // 2) - (final_popup_height // 2)
            
            screen_width = self.winfo_screenwidth()
            screen_height = self.winfo_screenheight()
            
            if position_x + final_popup_width > screen_width:
                position_x = screen_width - final_popup_width
            if position_y + final_popup_height > screen_height:
                position_y = screen_height - final_popup_height
            if position_x < 0: position_x = 0
            if position_y < 0: position_y = 0
                
            self.geometry(f"{final_popup_width}x{final_popup_height}+{int(position_x)}+{int(position_y)}")
            logging.info(f"SubtitleStyleSettingsWindow: ƒê√£ cƒÉn gi·ªØa t·∫°i ({int(position_x)}, {int(position_y)}) v·ªõi k√≠ch th∆∞·ªõc {final_popup_width}x{final_popup_height}")
        except Exception as e:
            logging.warning(f"Kh√¥ng th·ªÉ cƒÉn gi·ªØa SubtitleStyleSettingsWindow: {e}")
            self.geometry(f"{desired_popup_width}x{desired_popup_height}")


        # --- StringVars c·ª•c b·ªô cho c√°c Entry s·ªë ---
        self.font_size_str_var = ctk.StringVar(value=str(self.master_app.sub_style_font_size_var.get()))
        self.outline_size_str_var = ctk.StringVar(value=str(self.master_app.sub_style_outline_size_var.get()))
        self.marginv_str_var = ctk.StringVar(value=str(self.master_app.sub_style_marginv_var.get()))

        # CODE M·ªöI CHO PREVIEW 
        preview_frame = ctk.CTkFrame(self, fg_color=("#404040", "#282828"), height=120, corner_radius=8)
        preview_frame.pack(fill="x", padx=15, pady=(15, 10))
        preview_frame.pack_propagate(False) # NgƒÉn frame co l·∫°i theo n·ªôi dung

        self.preview_image_label = ctk.CTkLabel(
            preview_frame, 
            text="Xem tr∆∞·ªõc s·∫Ω hi·ªán ·ªü ƒë√¢y...", # Text t·∫°m th·ªùi
            text_color="gray"
        )
        self.preview_image_label.pack(expand=True, fill="both")
        # K·∫æT TH√öC ƒêO·∫†N CODE M·ªöI

        self.main_scroll_frame = ctk.CTkScrollableFrame(self, fg_color="transparent")
        self.main_scroll_frame.pack(expand=True, fill="both", padx=15, pady=15)
        
        self._create_style_widgets() # ƒê·∫£m b·∫£o t√™n h√†m n√†y kh·ªõp v·ªõi ƒë·ªãnh nghƒ©a c·ªßa b·∫°n

        bottom_button_frame = ctk.CTkFrame(self, fg_color="transparent")
        bottom_button_frame.pack(fill="x", padx=15, pady=(5, 15), side="bottom")

        cancel_button = ctk.CTkButton(bottom_button_frame, text="H·ªßy", width=100, command=self._on_close_window)
        cancel_button.pack(side="right", padx=(10, 0))

        save_button = ctk.CTkButton(bottom_button_frame, text="L∆∞u v√† ƒê√≥ng", width=130, command=self._save_settings_and_close, fg_color="#1f6aa5")
        save_button.pack(side="right")

        self.protocol("WM_DELETE_WINDOW", self._on_close_window)
        self.after(10, self._update_all_dependent_controls_visibility)
        self.after(200, self._update_preview_image)

#-----------------------------------------------------------------------------------------------------
# H√†m helper ƒë·ªÉ t√¨m ƒë∆∞·ªùng d·∫´n file
    def _find_font_file(self, font_name, is_bold=False):
        """
        H√†m helper t√¨m ƒë∆∞·ªùng d·∫´n file font, s·ª≠ d·ª•ng matplotlib.font_manager ƒë·ªÉ c√≥ k·∫øt qu·∫£ ch√≠nh x√°c.
        """
        # Cache ƒë·ªÉ kh√¥ng ph·∫£i t√¨m l·∫°i nhi·ªÅu l·∫ßn, gi√∫p tƒÉng t·ªëc
        if not hasattr(self, '_font_cache'):
            self._font_cache = {}
        
        cache_key = f"{font_name}_{'bold' if is_bold else 'regular'}"
        if cache_key in self._font_cache:
            return self._font_cache[cache_key]

        try:
            # T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng FontProperties ƒë·ªÉ m√¥ t·∫£ font c·∫ßn t√¨m
            font_prop = font_manager.FontProperties(
                family=font_name,
                weight='bold' if is_bold else 'normal'
            )
            
            # D√πng findfont ƒë·ªÉ t√¨m ki·∫øm chuy√™n nghi·ªáp. N√≥ s·∫Ω t·ª± x·ª≠ l√Ω c√°c bi·∫øn th·ªÉ t√™n file.
            found_path = font_manager.findfont(font_prop, fallback_to_default=False)
            
            if found_path:
                logging.info(f"ƒê√£ t√¨m th·∫•y file cho font '{font_name}' (Bold: {is_bold}): {found_path}")
                self._font_cache[cache_key] = found_path
                return found_path
            
        except Exception as e_fm:
            # N·∫øu findfont kh√¥ng t√¨m th·∫•y, n√≥ s·∫Ω n√©m ra l·ªói.
            # Ch√∫ng ta s·∫Ω b·∫Øt l·ªói n√†y v√† coi nh∆∞ kh√¥ng t√¨m th·∫•y.
            pass

        # N·∫øu kh√¥ng t√¨m th·∫•y, l∆∞u k·∫øt qu·∫£ v√†o cache v√† tr·∫£ v·ªÅ None
        logging.warning(f"Kh√¥ng t√¨m th·∫•y file font cho '{font_name}' (Bold: {is_bold}) b·∫±ng font_manager.")
        self._font_cache[cache_key] = None
        return None


# H√†m T·∫°o v√† c·∫≠p nh·∫≠t ·∫£nh xem tr∆∞·ªõc d·ª±a tr√™n c√°c c√†i ƒë·∫∑t hi·ªán t·∫°i.
    def _update_preview_image(self):
        """T·∫°o v√† c·∫≠p nh·∫≠t ·∫£nh xem tr∆∞·ªõc d·ª±a tr√™n c√°c c√†i ƒë·∫∑t hi·ªán t·∫°i."""
        from PIL import Image, ImageDraw, ImageFont
        
        try:
            # --- 1. L·∫•y t·∫•t c·∫£ c√†i ƒë·∫∑t hi·ªán t·∫°i t·ª´ c√°c bi·∫øn ---
            font_size = int(self.font_size_str_var.get() or "60")
            font_name = self.master_app.sub_style_font_name_var.get()
            is_bold = self.master_app.sub_style_font_bold_var.get()
            
            text_color_tuple = self._parse_color_string_to_tuple(self.master_app.sub_style_text_color_rgb_str_var.get())
            text_opacity = self.master_app.sub_style_text_opacity_percent_var.get()
            text_alpha = int(255 * (text_opacity / 100.0))
            text_color_rgba = (*text_color_tuple, text_alpha)

            background_mode = self.master_app.sub_style_background_mode_var.get()
            
        except (ValueError, TypeError) as e:
            logging.warning(f"Gi√° tr·ªã c√†i ƒë·∫∑t kh√¥ng h·ª£p l·ªá cho preview: {e}. B·ªè qua c·∫≠p nh·∫≠t.")
            return

        # --- 2. T·∫°o ·∫£nh n·ªÅn ---
        preview_width, preview_height = 580, 100
        img = Image.new('RGBA', (preview_width, preview_height), (40, 40, 40, 255))
        draw = ImageDraw.Draw(img)

        # --- 3. Chu·∫©n b·ªã font ---
        font_path = self._find_font_file(font_name, is_bold=is_bold)
        if not font_path and is_bold:
            font_path = self._find_font_file(font_name, is_bold=False)
        if not font_path:
            font_path = self._find_font_file("Arial") 
            if not font_path:
                self.preview_image_label.configure(text="L·ªói: Kh√¥ng t√¨m th·∫•y font Arial.")
                return 
        try:
            pil_font = ImageFont.truetype(font_path, size=font_size)
        except Exception as e:
            self.preview_image_label.configure(text=f"L·ªói t·∫£i font:\n{os.path.basename(font_path)}")
            return
            
        # --- 4. V·∫Ω ph·ª• ƒë·ªÅ m·∫´u ---
        sample_text = "ƒê√¢y l√† d√≤ng ph·ª• ƒë·ªÅ m·∫´u\nƒë·ªÉ xem tr∆∞·ªõc font ch·ªØ."
        text_position = (preview_width / 2, preview_height / 2)

        # <<< --- B·∫ÆT ƒê·∫¶U KH·ªêI LOGIC V·∫º ƒê√É S·ª¨A --- >>>
        if background_mode == "Box N·ªÅn":
            bg_color_tuple = self._parse_color_string_to_tuple(self.master_app.sub_style_bg_color_rgb_str_var.get())
            bg_opacity = self.master_app.sub_style_bg_box_actual_opacity_percent_var.get()
            bg_alpha = int(255 * (bg_opacity / 100.0))
            bg_color_rgba = (*bg_color_tuple, bg_alpha)
            
            bbox = draw.textbbox(text_position, sample_text, font=pil_font, anchor="mm", align="center")
            padded_bbox = (bbox[0] - 8, bbox[1] - 4, bbox[2] + 8, bbox[3] + 4)
            draw.rounded_rectangle(padded_bbox, radius=5, fill=bg_color_rgba)
        
        elif background_mode == "ƒê·ªï B√≥ng":
            # ƒê·ªÉ xem tr∆∞·ªõc, ta s·∫Ω v·∫Ω m·ªôt vi·ªÅn ch·ªØ m·ªù b·∫±ng m√†u c·ªßa b√≥ng
            shadow_color_tuple = self._parse_color_string_to_tuple(self.master_app.sub_style_bg_color_rgb_str_var.get())
            shadow_opacity = self.master_app.sub_style_bg_box_actual_opacity_percent_var.get()
            shadow_alpha = int(255 * (shadow_opacity / 100.0))
            shadow_color_rgba = (*shadow_color_tuple, shadow_alpha)
            
            # K√≠ch th∆∞·ªõc c·ªßa b√≥ng c√≥ th·ªÉ l·∫•y t·ª´ k√≠ch th∆∞·ªõc vi·ªÅn
            shadow_size = int(float(self.outline_size_str_var.get() or "2.0"))

            # V·∫Ω b√≥ng (l√† m·ªôt vi·ªÅn ch·ªØ d√†y)
            draw.text(text_position, sample_text, font=pil_font, 
                      anchor="mm", align="center", 
                      stroke_width=shadow_size, 
                      stroke_fill=shadow_color_rgba)
        
        elif background_mode == "Kh√¥ng N·ªÅn":
            # Ch·ªâ v·∫Ω vi·ªÅn ch·ªØ n·∫øu checkbox ƒë∆∞·ª£c b·∫≠t
            if self.master_app.sub_style_outline_enabled_var.get():
                outline_size = float(self.outline_size_str_var.get() or "2.0")
                outline_color_tuple = self._parse_color_string_to_tuple(self.master_app.sub_style_outline_color_rgb_str_var.get())
                outline_opacity = self.master_app.sub_style_outline_opacity_percent_var.get()
                outline_alpha = int(255 * (outline_opacity / 100.0))
                outline_color_rgba = (*outline_color_tuple, outline_alpha)

                draw.text(text_position, sample_text, font=pil_font, 
                          anchor="mm", align="center", 
                          stroke_width=int(outline_size), 
                          stroke_fill=outline_color_rgba)

        # V·∫Ω ch·ªØ ch√≠nh L√äN TR√äN T·∫§T C·∫¢
        draw.text(text_position, sample_text, font=pil_font, fill=text_color_rgba, anchor="mm", align="center")
        # <<< --- K·∫æT TH√öC KH·ªêI LOGIC V·∫º ƒê√É S·ª¨A --- >>>

        # --- 5. Hi·ªÉn th·ªã ·∫£nh ƒë√£ t·∫°o ---
        try:
            ctk_image = ctk.CTkImage(light_image=img, dark_image=img, size=(preview_width, preview_height))
            self.preview_image_label.configure(image=ctk_image, text="")
            self.preview_image_label.image = ctk_image 
        except Exception as e:
            logging.error(f"L·ªói khi hi·ªÉn th·ªã ·∫£nh preview: {e}")
            

# h√†m "Trigger" trung gian tr√°nh vi·ªác c·∫≠p nh·∫≠t ·∫£nh li√™n t·ª•c v√† g√¢y gi·∫≠t
    def _trigger_preview_update(self, *args):
        # D√πng after() ƒë·ªÉ tr√°nh g·ªçi h√†m c·∫≠p nh·∫≠t qu√° d·ªìn d·∫≠p
        # N√≥ s·∫Ω h·ªßy l·ªánh g·ªçi c≈© v√† ch·ªâ th·ª±c hi·ªán l·ªánh g·ªçi cu·ªëi c√πng sau 150ms
        if hasattr(self, '_after_id_preview'):
            self.after_cancel(self._after_id_preview)
        
        self._after_id_preview = self.after(150, self._update_preview_image)


    def _parse_color_string_to_tuple(self, color_str, default_color=(255,255,255)): #
        try:
            parts = list(map(int, color_str.split(','))) #
            return tuple(parts) if len(parts) == 3 and all(0 <= val <= 255 for val in parts) else default_color #
        except:
            return default_color #

    def _format_color_tuple_to_string(self, color_tuple): #
        return f"{int(color_tuple[0])},{int(color_tuple[1])},{int(color_tuple[2])}" #

    def _get_contrasting_text_color(self, hex_bg_color): #
        try:
            r = int(hex_bg_color[1:3], 16); g = int(hex_bg_color[3:5], 16); b = int(hex_bg_color[5:7], 16) #
            luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255 #
            return "black" if luminance > 0.55 else "white" #
        except:
            return "white" #

    def _pick_color(self, string_var_to_update, title="Ch·ªçn m√†u"): #
        current_color_str = string_var_to_update.get() #
        initial_color_tuple = self._parse_color_string_to_tuple(current_color_str) #
        initial_hex_color = '#%02x%02x%02x' % initial_color_tuple #
        
        chosen_color_info = colorchooser.askcolor(title=title, initialcolor=initial_hex_color, parent=self) #
        
        if chosen_color_info and chosen_color_info[0]:
            new_color_tuple = tuple(map(int, chosen_color_info[0]))
            new_color_str = self._format_color_tuple_to_string(new_color_tuple)
            string_var_to_update.set(new_color_str)
            self._trigger_preview_update() 

    def _create_color_button_with_label(self, parent_frame, row, col_button, string_var_instance):
        button_attr_name = f"btn_color_{string_var_instance._name}"

        def _update_button_display_on_var_change(*args):
            target_button = getattr(self, button_attr_name, None)
            if target_button and target_button.winfo_exists():
                current_color_str_val = string_var_instance.get()
                current_color_tuple_val = self._parse_color_string_to_tuple(current_color_str_val)
                current_hex_color_val = '#%02x%02x%02x' % current_color_tuple_val
                target_button.configure(
                    text=current_color_str_val,
                    fg_color=current_hex_color_val,
                    text_color=self._get_contrasting_text_color(current_hex_color_val)
                )

        initial_str_val = string_var_instance.get()
        initial_tuple_val = self._parse_color_string_to_tuple(initial_str_val)
        initial_hex_val = '#%02x%02x%02x' % initial_tuple_val

        color_button_widget = ctk.CTkButton(
            parent_frame, text=initial_str_val, width=150, height=28,
            fg_color=initial_hex_val,
            text_color=self._get_contrasting_text_color(initial_hex_val),
            command=lambda sv=string_var_instance: self._pick_color(sv, f"Ch·ªçn m√†u cho {sv._name}")
        )
        color_button_widget.grid(row=row, column=col_button, padx=5, pady=5, sticky="ew")
        setattr(self, button_attr_name, color_button_widget)
        string_var_instance.trace_add("write", _update_button_display_on_var_change)

    def _create_slider_with_label(self, parent_frame, row, col_slider, col_value, int_var_instance, value_label_attr_name):
        slider_widget = ctk.CTkSlider(
            parent_frame, from_=0, to=100, number_of_steps=100,
            variable=int_var_instance,
            command=lambda value, attr_name=value_label_attr_name: (self._update_slider_value_label(attr_name, value), self._trigger_preview_update())
        )
        slider_widget.grid(row=row, column=col_slider, padx=5, pady=5, sticky="ew")
        value_display_label = ctk.CTkLabel(parent_frame, text=f"{int_var_instance.get()}%", width=45, font=("Segoe UI", 11))
        value_display_label.grid(row=row, column=col_value, padx=(5,0), pady=5, sticky="w")
        setattr(self, value_label_attr_name, value_display_label)

    def _update_slider_value_label(self, label_attribute_name, value): #
        target_label = getattr(self, label_attribute_name, None) #
        if target_label and target_label.winfo_exists(): #
            target_label.configure(text=f"{int(value)}%") #

    def _create_style_widgets(self):
        label_font_ui = ("Segoe UI", 12)
        section_font_ui = ("Segoe UI", 13, "bold")
        entry_width_small = 70
        entry_width_medium = 100

        # === Nh√≥m: Nh·∫≠p / Xu·∫•t Style ===
        preset_group_frame = ctk.CTkFrame(self.main_scroll_frame)
        preset_group_frame.pack(fill="x", pady=(0, 15), padx=5)
        ctk.CTkLabel(preset_group_frame, text="‚öôÔ∏è Qu·∫£n l√Ω Style (File .json):", font=section_font_ui, anchor="w").pack(fill="x", padx=5, pady=(5,5))

        preset_controls_frame = ctk.CTkFrame(preset_group_frame, fg_color="transparent")
        preset_controls_frame.pack(fill="x", padx=10, pady=5)
        preset_controls_frame.grid_columnconfigure((0, 1), weight=1)

        self.import_style_button = ctk.CTkButton(preset_controls_frame, text="Nh·∫≠p Style t·ª´ File...", command=self._import_style_from_file)
        self.import_style_button.grid(row=0, column=0, padx=(0, 5), sticky="ew")

        self.export_style_button = ctk.CTkButton(preset_controls_frame, text="Xu·∫•t Style ra File...", command=self._export_style_to_file)
        self.export_style_button.grid(row=0, column=1, padx=(5, 0), sticky="ew")
        
        # --- Nh√≥m: Font Ch·ªØ ---
        font_group_frame = ctk.CTkFrame(self.main_scroll_frame)
        font_group_frame.pack(fill="x", pady=(0, 15), padx=5)
        ctk.CTkLabel(font_group_frame, text="‚úí Font Ch·ªØ:", font=section_font_ui, anchor="w").pack(fill="x", padx=5, pady=(5,5))

        font_options_frame = ctk.CTkFrame(font_group_frame, fg_color="transparent")
        font_options_frame.pack(fill="x", padx=10)
        font_options_frame.grid_columnconfigure(1, weight=1)
        font_options_frame.grid_columnconfigure(4, weight=0)

        ctk.CTkLabel(font_options_frame, text="T√™n Font:", font=label_font_ui).grid(row=0, column=0, padx=(0,5), pady=5, sticky="e")
        self.custom_font_dropdown = CustomFontDropdown(
            master=font_options_frame, font_variable=self.master_app.sub_style_font_name_var,
            font_list_cache=self.master_app.system_fonts_cache, parent_scrollable_frame=self.main_scroll_frame,
            width=250, height=30, update_callback=self._trigger_preview_update
        )
        self.custom_font_dropdown.grid(row=0, column=1, padx=5, pady=5, sticky="ew")
        self.refresh_fonts_button = ctk.CTkButton(font_options_frame, text="üîÑ", width=30, height=30, command=self.master_app._force_rescan_fonts)
        self.refresh_fonts_button.grid(row=0, column=2, padx=(5, 0), pady=5, sticky="w")
        Tooltip(self.refresh_fonts_button, "Qu√©t l·∫°i danh s√°ch font tr√™n m√°y t√≠nh (h·ªØu √≠ch khi b·∫°n v·ª´a c√†i font m·ªõi)")
        ctk.CTkLabel(font_options_frame, text="K√≠ch th∆∞·ªõc:", font=label_font_ui).grid(row=0, column=3, padx=(15,5), pady=5, sticky="e")
        self.font_size_entry = ctk.CTkEntry(font_options_frame, textvariable=self.font_size_str_var, width=entry_width_small)
        self.font_size_entry.grid(row=0, column=4, padx=5, pady=5, sticky="w")
        self.font_size_entry.bind("<KeyRelease>", self._trigger_preview_update)
        self.font_bold_checkbox = ctk.CTkCheckBox(font_options_frame, text="In ƒë·∫≠m", variable=self.master_app.sub_style_font_bold_var, font=label_font_ui, command=self._trigger_preview_update)
        self.font_bold_checkbox.grid(row=0, column=5, padx=(15,5), pady=5, sticky="w")

        # --- Nh√≥m: M√†u S·∫Øc & ƒê·ªô M·ªù Ch·ªØ ---
        text_appearance_group_frame = ctk.CTkFrame(self.main_scroll_frame)
        text_appearance_group_frame.pack(fill="x", pady=(0, 15), padx=5)
        ctk.CTkLabel(text_appearance_group_frame, text="üåà M√†u Ch·ªØ & ƒê·ªô ƒê·ª•c:", font=section_font_ui, anchor="w").pack(fill="x", padx=5, pady=(5,5))
        text_color_opacity_frame_internal = ctk.CTkFrame(text_appearance_group_frame, fg_color="transparent")
        text_color_opacity_frame_internal.pack(fill="x", padx=10)
        text_color_opacity_frame_internal.grid_columnconfigure(1, weight=1)
        ctk.CTkLabel(text_color_opacity_frame_internal, text="M√†u ch·ªØ (R,G,B):", font=label_font_ui).grid(row=0, column=0, padx=(0,5), pady=5, sticky="e")
        self._create_color_button_with_label(text_color_opacity_frame_internal, 0, 1, self.master_app.sub_style_text_color_rgb_str_var)
        ctk.CTkLabel(text_color_opacity_frame_internal, text="ƒê·ªô ƒë·ª•c ch·ªØ (%):", font=label_font_ui).grid(row=0, column=2, padx=(15,5), pady=5, sticky="e")
        self._create_slider_with_label(text_color_opacity_frame_internal, 0, 3, 4, self.master_app.sub_style_text_opacity_percent_var, "text_opacity_val_lbl")
        
        # --- Nh√≥m: Box N·ªÅn / ƒê·ªï B√≥ng (ƒê√É S·ª¨A L·∫†I LAYOUT) ---
        bg_box_group_frame = ctk.CTkFrame(self.main_scroll_frame)
        bg_box_group_frame.pack(fill="x", pady=(0, 15), padx=5)
        ctk.CTkLabel(bg_box_group_frame, text="üì¶ N·ªÅn Ph·ª• ƒë·ªÅ:", font=section_font_ui, anchor="w").pack(fill="x", padx=5, pady=(5,0))
        ctk.CTkLabel(bg_box_group_frame, text="Ki·ªÉu N·ªÅn:", font=label_font_ui).pack(side="left", padx=(15, 10), pady=(5,5))
        self.background_mode_selector = ctk.CTkSegmentedButton(
            bg_box_group_frame, values=["Kh√¥ng N·ªÅn", "Box N·ªÅn", "ƒê·ªï B√≥ng"],
            variable=self.master_app.sub_style_background_mode_var,
            command=lambda value: (self._update_all_dependent_controls_visibility(), self._trigger_preview_update())
        )
        self.background_mode_selector.pack(side="left", fill="x", expand=True, padx=(0, 15), pady=(5,5))
        
        self.bg_box_details_frame = ctk.CTkFrame(bg_box_group_frame, fg_color="transparent")
        self.bg_box_details_frame.grid_columnconfigure(1, weight=1) # C·ªôt 1 (widget) s·∫Ω gi√£n ra

        # H√†ng 0: M√†u s·∫Øc
        self.bg_color_label = ctk.CTkLabel(self.bg_box_details_frame, text="M√†u (R,G,B):", font=label_font_ui)
        self.bg_color_label.grid(row=0, column=0, padx=(10, 5), pady=5, sticky="e")
        self._create_color_button_with_label(self.bg_box_details_frame, 0, 1, self.master_app.sub_style_bg_color_rgb_str_var)
        
        # H√†ng 1: ƒê·ªô ƒë·ª•c
        self.bg_opacity_label = ctk.CTkLabel(self.bg_box_details_frame, text="ƒê·ªô ƒë·ª•c (%):", font=label_font_ui)
        self.bg_opacity_label.grid(row=1, column=0, padx=(10, 5), pady=5, sticky="e")
        slider_container_for_bg = ctk.CTkFrame(self.bg_box_details_frame, fg_color="transparent")
        slider_container_for_bg.grid(row=1, column=1, padx=0, pady=0, sticky="ew")
        slider_container_for_bg.grid_columnconfigure(0, weight=1)
        self._create_slider_with_label(slider_container_for_bg, 0, 0, 1, self.master_app.sub_style_bg_box_actual_opacity_percent_var, "bg_opacity_val_lbl")

        # --- Nh√≥m: Vi·ªÅn Ch·ªØ (Outline) --- (Gi·ªØ nguy√™n)
        # ... (code c·ªßa b·∫°n cho ph·∫ßn Outline ·ªü ƒë√¢y) ...
        outline_group_frame = ctk.CTkFrame(self.main_scroll_frame)
        outline_group_frame.pack(fill="x", pady=(0, 15), padx=5)
        ctk.CTkLabel(outline_group_frame, text="‚úí Vi·ªÅn Ch·ªØ (Outline):", font=section_font_ui, anchor="w").pack(fill="x", padx=5, pady=(5,0))
        
        self.outline_enabled_checkbox = ctk.CTkCheckBox(
            outline_group_frame, text="B·∫≠t Vi·ªÅn Ch·ªØ",
            variable=self.master_app.sub_style_outline_enabled_var,
            command=lambda: (self._update_all_dependent_controls_visibility(), self._trigger_preview_update()),
            font=label_font_ui            
        )
        self.outline_enabled_checkbox.pack(anchor="w", padx=15, pady=(2,5))

        self.outline_details_frame = ctk.CTkFrame(outline_group_frame, fg_color="transparent")
        self.outline_details_frame.pack(fill="x", pady=(0,5), padx=5)
        self.outline_details_frame.grid_columnconfigure(1, weight=1)

        ctk.CTkLabel(self.outline_details_frame, text="M√†u vi·ªÅn (R,G,B):", font=label_font_ui).grid(row=0, column=0, padx=(0,5), pady=5, sticky="e")
        self._create_color_button_with_label(self.outline_details_frame, 0, 1, self.master_app.sub_style_outline_color_rgb_str_var)
        
        ctk.CTkLabel(self.outline_details_frame, text="ƒê·ªô ƒë·ª•c vi·ªÅn (%):", font=label_font_ui).grid(row=1, column=0, padx=(0,5), pady=5, sticky="e")
        self._create_slider_with_label(self.outline_details_frame, 1, 1, 2, self.master_app.sub_style_outline_opacity_percent_var, "outline_opacity_val_lbl")
        
        ctk.CTkLabel(self.outline_details_frame, text="K√≠ch th∆∞·ªõc vi·ªÅn:", font=label_font_ui).grid(row=2, column=0, padx=(0,5), pady=5, sticky="e")
        self.outline_size_entry = ctk.CTkEntry(self.outline_details_frame, textvariable=self.outline_size_str_var, width=entry_width_medium)
        self.outline_size_entry.grid(row=2, column=1, padx=5, pady=5, sticky="w")
        self.outline_size_entry.bind("<KeyRelease>", self._trigger_preview_update)
        
        # --- Nh√≥m: L·ªÅ (Margins) ---
        margin_group_frame = ctk.CTkFrame(self.main_scroll_frame)
        margin_group_frame.pack(fill="x", pady=(0, 15), padx=5)
        ctk.CTkLabel(margin_group_frame, text="üìè L·ªÅ D∆∞·ªõi:", font=section_font_ui, anchor="w").pack(fill="x", padx=5, pady=(5,5))
        
        margin_options_frame = ctk.CTkFrame(margin_group_frame, fg_color="transparent")
        margin_options_frame.pack(fill="x", padx=10)
        margin_options_frame.grid_columnconfigure(1, weight=0)

        ctk.CTkLabel(margin_options_frame, text=" L·ªÅ d∆∞·ªõi (pixels):", font=label_font_ui).grid(row=0, column=0, padx=(0,5), pady=5, sticky="w")
        self.marginv_entry = ctk.CTkEntry(margin_options_frame, textvariable=self.marginv_str_var, width=entry_width_medium)
        self.marginv_entry.grid(row=0, column=1, padx=5, pady=5, sticky="w")
        self.marginv_entry.bind("<KeyRelease>", self._trigger_preview_update)


    def _update_all_dependent_controls_visibility(self, *args):
        is_outline_enabled = self.master_app.sub_style_outline_enabled_var.get()
        background_mode = self.master_app.sub_style_background_mode_var.get()
        
        # --- X·ª≠ l√Ω Frame chi ti·∫øt c·ªßa Box N·ªÅn / ƒê·ªï B√≥ng ---
        show_bg_details = background_mode in ["Box N·ªÅn", "ƒê·ªï B√≥ng"]
        if hasattr(self, 'bg_box_details_frame') and self.bg_box_details_frame.winfo_exists():
            parent_frame = self.bg_box_details_frame.master
            if show_bg_details:
                # <<< B·∫ÆT ƒê·∫¶U TH√äM LOGIC M·ªöI >>>
                if background_mode == "Box N·ªÅn":
                    self.bg_color_label.configure(text="M√†u box (R,G,B):")
                    self.bg_opacity_label.configure(text="ƒê·ªô ƒë·ª•c box (%):")
                elif background_mode == "ƒê·ªï B√≥ng":
                    self.bg_color_label.configure(text="M√†u b√≥ng (R,G,B):")
                    self.bg_opacity_label.configure(text="ƒê·ªô ƒë·ª•c b√≥ng (%):")
                # <<< K·∫æT TH√öC LOGIC M·ªöI >>>

                if not self.bg_box_details_frame.winfo_ismapped():
                    self.bg_box_details_frame.pack(in_=parent_frame, fill="x", pady=(0,10), padx=20, after=self.background_mode_selector)
            else:
                if self.bg_box_details_frame.winfo_ismapped():
                    self.bg_box_details_frame.pack_forget()

        # --- X·ª≠ l√Ω Frame chi ti·∫øt c·ªßa Vi·ªÅn ch·ªØ v√† Checkbox Vi·ªÅn ch·ªØ ---
        # V√¥ hi·ªáu h√≥a checkbox "B·∫≠t Vi·ªÅn Ch·ªØ" khi ƒëang ·ªü ch·∫ø ƒë·ªô "Box N·ªÅn"
        outline_checkbox_state = "disabled" if background_mode == "Box N·ªÅn" else "normal"
        if hasattr(self, 'outline_enabled_checkbox') and self.outline_enabled_checkbox.winfo_exists():
            self.outline_enabled_checkbox.configure(state=outline_checkbox_state)
            if background_mode == "Box N·ªÅn": # T·ª± ƒë·ªông b·ªè tick n·∫øu ch·ªçn Box N·ªÅn
                self.master_app.sub_style_outline_enabled_var.set(False)
        
        # Ch·ªâ hi·ªán c√°c t√πy ch·ªçn vi·ªÅn ch·ªØ n·∫øu checkbox ƒë∆∞·ª£c b·∫≠t V√Ä kh√¥ng ·ªü ch·∫ø ƒë·ªô Box N·ªÅn
        show_outline_details = self.master_app.sub_style_outline_enabled_var.get() and background_mode != "Box N·ªÅn"
        if hasattr(self, 'outline_details_frame') and self.outline_details_frame.winfo_exists():
            parent_frame_outline = self.outline_details_frame.master
            if show_outline_details:
                if not self.outline_details_frame.winfo_ismapped():
                    self.outline_details_frame.pack(in_=parent_frame_outline, fill="x", pady=(0,10), padx=20, after=self.outline_enabled_checkbox)
            else:
                if self.outline_details_frame.winfo_ismapped():
                    self.outline_details_frame.pack_forget()

    def _validate_and_save_settings(self): #
        logging.debug("[SubtitleStyleSettingsWindow] B·∫Øt ƒë·∫ßu _validate_and_save_settings.")
        try:
            # --- Font Size ---
            font_size_str = self.font_size_str_var.get().strip() # L·∫•y t·ª´ StringVar
            if not font_size_str:
                logging.warning("Subtitle Style: K√≠ch th∆∞·ªõc font tr·ªëng, ƒë·∫∑t m·∫∑c ƒë·ªãnh 60.")
                self.master_app.sub_style_font_size_var.set(60) # Set IntVar c·ªßa master_app
            else:
                try:
                    font_size_int = int(font_size_str)
                    if not (8 <= font_size_int <= 150):
                        messagebox.showerror("Gi√° tr·ªã kh√¥ng h·ª£p l·ªá", f"K√≠ch th∆∞·ªõc font ('{font_size_str}') ph·∫£i l√† s·ªë nguy√™n t·ª´ 8 ƒë·∫øn 150.", parent=self)
                        return False
                    self.master_app.sub_style_font_size_var.set(font_size_int)
                except ValueError:
                    messagebox.showerror("Gi√° tr·ªã kh√¥ng h·ª£p l·ªá", f"K√≠ch th∆∞·ªõc font ('{font_size_str}') ph·∫£i l√† m·ªôt s·ªë nguy√™n.", parent=self)
                    return False

            # --- M√†u s·∫Øc --- (Gi·ªØ nguy√™n logic validate m√†u t·ª´ def.txt )
            color_vars_to_validate = {
                "M√†u ch·ªØ": self.master_app.sub_style_text_color_rgb_str_var,
                "M√†u n·ªÅn box": self.master_app.sub_style_bg_color_rgb_str_var,
            }
            if self.master_app.sub_style_outline_enabled_var.get():
                 color_vars_to_validate["M√†u vi·ªÅn"] = self.master_app.sub_style_outline_color_rgb_str_var
            for label, color_var in color_vars_to_validate.items():
                color_str = color_var.get()
                try:
                    parts = [p.strip() for p in color_str.split(',')]
                    if not (len(parts) == 3 and all(p.isdigit() and 0 <= int(p) <= 255 for p in parts)):
                        messagebox.showerror("M√†u kh√¥ng h·ª£p l·ªá", f"{label} ('{color_str}') kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng R,G,B (0-255).", parent=self)
                        return False
                except Exception:
                    messagebox.showerror("M√†u kh√¥ng h·ª£p l·ªá", f"{label} ('{color_str}') c√≥ l·ªói khi ph√¢n t√≠ch.", parent=self)
                    return False


            # --- Outline Size ---
            if self.master_app.sub_style_outline_enabled_var.get():
                outline_size_str = self.outline_size_str_var.get().strip() # L·∫•y t·ª´ StringVar
                if not outline_size_str:
                    logging.warning("Subtitle Style: K√≠ch th∆∞·ªõc vi·ªÅn tr·ªëng (khi vi·ªÅn b·∫≠t), ƒë·∫∑t m·∫∑c ƒë·ªãnh 1.0.")
                    self.master_app.sub_style_outline_size_var.set(1.0) # Set DoubleVar c·ªßa master_app
                else:
                    try:
                        outline_size_float = float(outline_size_str)
                        if not (0.0 <= outline_size_float <= 10.0):
                            messagebox.showerror("Gi√° tr·ªã kh√¥ng h·ª£p l·ªá", f"K√≠ch th∆∞·ªõc vi·ªÅn ('{outline_size_str}') ph·∫£i t·ª´ 0.0 ƒë·∫øn 10.0.", parent=self)
                            return False
                        self.master_app.sub_style_outline_size_var.set(outline_size_float)
                    except ValueError:
                        messagebox.showerror("Gi√° tr·ªã kh√¥ng h·ª£p l·ªá", f"K√≠ch th∆∞·ªõc vi·ªÅn ('{outline_size_str}') ph·∫£i l√† m·ªôt s·ªë th·ª±c.", parent=self)
                        return False
            else: # N·∫øu vi·ªÅn kh√¥ng b·∫≠t, c√≥ th·ªÉ ƒë·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh cho DoubleVar n·∫øu mu·ªën
                if not self.outline_size_str_var.get().strip(): # N·∫øu StringVar c≈©ng tr·ªëng
                    self.master_app.sub_style_outline_size_var.set(1.0)


            # --- MarginV (L·ªÅ d∆∞·ªõi) ---
            marginv_str = self.marginv_str_var.get().strip() # L·∫•y t·ª´ StringVar
            if not marginv_str:
                logging.warning("Subtitle Style: L·ªÅ d∆∞·ªõi tr·ªëng, ƒë·∫∑t m·∫∑c ƒë·ªãnh 25.")
                self.master_app.sub_style_marginv_var.set(25) # Set IntVar c·ªßa master_app
            else:
                try:
                    margin_val_int = int(marginv_str)
                    if not (-100 <= margin_val_int <= 300):
                        messagebox.showerror("Gi√° tr·ªã kh√¥ng h·ª£p l·ªá", f"L·ªÅ d∆∞·ªõi ('{marginv_str}') ph·∫£i l√† s·ªë nguy√™n (v√≠ d·ª•: t·ª´ -100 ƒë·∫øn 300).", parent=self)
                        return False
                    self.master_app.sub_style_marginv_var.set(margin_val_int)
                except ValueError:
                    messagebox.showerror("Gi√° tr·ªã kh√¥ng h·ª£p l·ªá", f"L·ªÅ d∆∞·ªõi ('{marginv_str}') ph·∫£i l√† m·ªôt s·ªë nguy√™n.", parent=self)
                    return False

            logging.info("[SubtitleStyleSettingsWindow] X√°c th·ª±c c√†i ƒë·∫∑t style th√†nh c√¥ng.")
            return True
        except Exception as e_val_style:
            logging.error(f"[SubtitleStyleSettingsWindow] L·ªói validation style: {e_val_style}", exc_info=True)
            messagebox.showerror("L·ªói Validate Style", f"L·ªói khi ki·ªÉm tra gi√° tr·ªã c√†i ƒë·∫∑t style:\n{e_val_style}", parent=self)
            return False


    # --- C√ÅC H√ÄM M·ªöI CHO T√çNH NƒÇNG L∆ØU PRESET FONTSTYLE ---

    def _apply_style_data(self, preset_data):
        """H√†m helper ƒë·ªÉ √°p d·ª•ng d·ªØ li·ªáu t·ª´ m·ªôt dictionary v√†o c√°c bi·∫øn UI."""
        try:
            # C·∫≠p nh·∫≠t c√°c bi·∫øn (IntVar, StringVar, BooleanVar, DoubleVar)
            self.master_app.sub_style_font_name_var.set(preset_data.get("sub_style_font_name", "Arial"))
            self.master_app.sub_style_font_size_var.set(preset_data.get("sub_style_font_size", 60))
            self.master_app.sub_style_font_bold_var.set(preset_data.get("sub_style_font_bold", True))
            self.master_app.sub_style_text_color_rgb_str_var.set(preset_data.get("sub_style_text_color_rgb_str", "255,255,255"))
            self.master_app.sub_style_text_opacity_percent_var.set(preset_data.get("sub_style_text_opacity_percent", 100))
            self.master_app.sub_style_background_mode_var.set(preset_data.get("sub_style_background_mode", "ƒê·ªï B√≥ng"))
            self.master_app.sub_style_bg_color_rgb_str_var.set(preset_data.get("sub_style_bg_color_rgb_str", "0,0,0"))
            self.master_app.sub_style_bg_box_actual_opacity_percent_var.set(preset_data.get("sub_style_bg_box_actual_opacity_percent", 75))
            self.master_app.sub_style_outline_enabled_var.set(preset_data.get("sub_style_outline_enabled", False))
            self.master_app.sub_style_outline_size_var.set(preset_data.get("sub_style_outline_size", 2.0))
            self.master_app.sub_style_outline_color_rgb_str_var.set(preset_data.get("sub_style_outline_color_rgb_str", "0,0,0"))
            self.master_app.sub_style_outline_opacity_percent_var.set(preset_data.get("sub_style_outline_opacity_percent", 100))
            self.master_app.sub_style_marginv_var.set(preset_data.get("margin_v", 60))

            # C·∫≠p nh·∫≠t c√°c bi·∫øn StringVars c·ª•c b·ªô cho c√°c Entry
            self.font_size_str_var.set(str(self.master_app.sub_style_font_size_var.get()))
            self.outline_size_str_var.set(str(self.master_app.sub_style_outline_size_var.get()))
            self.marginv_str_var.set(str(self.master_app.sub_style_marginv_var.get()))
            
            # K√≠ch ho·∫°t c·∫≠p nh·∫≠t c√°c control ph·ª• thu·ªôc
            self._update_all_dependent_controls_visibility()
            self._trigger_preview_update() # Y√™u c·∫ßu v·∫Ω l·∫°i ·∫£nh xem tr∆∞·ªõc
            
            logging.info("ƒê√£ √°p d·ª•ng th√†nh c√¥ng d·ªØ li·ªáu style v√†o giao di·ªán.")
            return True
        except Exception as e:
            logging.error(f"L·ªói khi √°p d·ª•ng d·ªØ li·ªáu style: {e}", exc_info=True)
            return False

    def _import_style_from_file(self):
        """M·ªü h·ªôp tho·∫°i ƒë·ªÉ ch·ªçn file .json v√† t·∫£i c√†i ƒë·∫∑t style."""
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn File Style (.json)",
            filetypes=[("JSON Style Files", "*.json"), ("All files", "*.*")],
            parent=self
        )
        if not file_path:
            return

        try:
            with open(file_path, "r", encoding="utf-8") as f:
                preset_data = json.load(f)
            
            # Ki·ªÉm tra xem c√≥ ph·∫£i l√† file style h·ª£p l·ªá kh√¥ng (b·∫±ng c√°ch ki·ªÉm tra m·ªôt v√†i key)
            if "sub_style_font_name" not in preset_data or "margin_v" not in preset_data:
                messagebox.showerror("File kh√¥ng h·ª£p l·ªá", "File JSON ƒë√£ ch·ªçn kh√¥ng c√≥ v·∫ª l√† m·ªôt file style h·ª£p l·ªá c·ªßa Piu.", parent=self)
                return

            if self._apply_style_data(preset_data):
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ nh·∫≠p th√†nh c√¥ng style t·ª´ file:\n{os.path.basename(file_path)}", parent=self)

        except (json.JSONDecodeError, IOError) as e:
            messagebox.showerror("L·ªói ƒê·ªçc File", f"Kh√¥ng th·ªÉ ƒë·ªçc ho·∫∑c ph√¢n t√≠ch file style.\nL·ªói: {e}", parent=self)
        except Exception as e:
            messagebox.showerror("L·ªói Kh√¥ng x√°c ƒë·ªãnh", f"ƒê√£ x·∫£y ra l·ªói khi nh·∫≠p style:\n{e}", parent=self)

    def _export_style_to_file(self):
        """Thu th·∫≠p c√†i ƒë·∫∑t hi·ªán t·∫°i v√† l∆∞u ch√∫ng v√†o m·ªôt file .json do ng∆∞·ªùi d√πng ch·ªçn."""
        file_path = filedialog.asksaveasfilename(
            title="L∆∞u File Style",
            defaultextension=".json",
            filetypes=[("JSON Style Files", "*.json"), ("All files", "*.*")],
            initialfile="My-Piu-Style.json",
            parent=self
        )
        if not file_path:
            return
            
        # X√°c th·ª±c c√°c gi√° tr·ªã hi·ªán t·∫°i tr∆∞·ªõc khi l∆∞u
        if not self._validate_and_save_settings():
            logging.warning("X√°c th·ª±c c√†i ƒë·∫∑t style th·∫•t b·∫°i. H·ªßy xu·∫•t file.")
            # _validate_and_save_settings ƒë√£ hi·ªán messagebox l·ªói r·ªìi
            return

        # Thu th·∫≠p t·∫•t c·∫£ c√°c gi√° tr·ªã hi·ªán t·∫°i t·ª´ master_app
        current_style_data = {
            "sub_style_font_name": self.master_app.sub_style_font_name_var.get(),
            "sub_style_font_size": self.master_app.sub_style_font_size_var.get(),
            "sub_style_font_bold": self.master_app.sub_style_font_bold_var.get(),
            "sub_style_text_color_rgb_str": self.master_app.sub_style_text_color_rgb_str_var.get(),
            "sub_style_text_opacity_percent": self.master_app.sub_style_text_opacity_percent_var.get(),
            "sub_style_background_mode": self.master_app.sub_style_background_mode_var.get(),
            "sub_style_bg_color_rgb_str": self.master_app.sub_style_bg_color_rgb_str_var.get(),
            "sub_style_bg_box_actual_opacity_percent": self.master_app.sub_style_bg_box_actual_opacity_percent_var.get(),
            "sub_style_outline_enabled": self.master_app.sub_style_outline_enabled_var.get(),
            "sub_style_outline_size": self.master_app.sub_style_outline_size_var.get(),
            "sub_style_outline_color_rgb_str": self.master_app.sub_style_outline_color_rgb_str_var.get(),
            "sub_style_outline_opacity_percent": self.master_app.sub_style_outline_opacity_percent_var.get(),
            "margin_v": self.master_app.sub_style_marginv_var.get(),
        }

        try:
            with open(file_path, "w", encoding="utf-8") as f:
                json.dump(current_style_data, f, ensure_ascii=False, indent=4)
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ xu·∫•t c√†i ƒë·∫∑t style hi·ªán t·∫°i ra file:\n{os.path.basename(file_path)}", parent=self)
        except Exception as e:
            messagebox.showerror("L·ªói L∆∞u File", f"Kh√¥ng th·ªÉ l∆∞u file style.\nL·ªói: {e}", parent=self)

    # --- K·∫æT TH√öC KH·ªêI H√ÄM M·ªöI ---

    def _save_settings_and_close(self): #
        logging.info("[SubtitleStyleSettingsWindow] N√∫t 'L∆∞u v√† ƒê√≥ng' (Style) ƒë∆∞·ª£c nh·∫•n.")
        if self._validate_and_save_settings(): #
            try:
                self.master_app.save_current_config() #
                logging.info("[SubtitleStyleSettingsWindow] ƒê√£ l∆∞u config style.") #
            except Exception as e_save_cfg_style: #
                logging.error(f"[SubtitleStyleSettingsWindow] L·ªói l∆∞u config: {e_save_cfg_style}", exc_info=True) #
                messagebox.showerror("L·ªói L∆∞u Config", f"L·ªói khi l∆∞u c·∫•u h√¨nh: {e_save_cfg_style}", parent=self) #
                return #
            self._on_close_window() #
        else:
            logging.warning("[SubtitleStyleSettingsWindow] Validation style th·∫•t b·∫°i, kh√¥ng l∆∞u v√† kh√¥ng ƒë√≥ng.") #

    def _on_close_window(self): #
        logging.info("[SubtitleStyleSettingsWindow] C·ª≠a s·ªï Style ƒëang ƒë∆∞·ª£c ƒë√≥ng.") #
        if hasattr(self, 'grab_status') and self.grab_status() != "none": #
            try: self.grab_release() #
            except Exception: pass
        try: self.destroy() #
        except Exception: pass

